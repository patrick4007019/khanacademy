/*
This is a 2d island survival game based on the actual game, Stranded Deep.

TIPS:

- Hidden resources are commonly found under trees; always check!
- Nighttime can be unproductive if you don't have a light source; it's completely dark. Good luck finding resources :)
- Ran out of resources on your island? Go to another.
- Sleep is really important; as soon as it reaches zero, you'll die (realism at its finest)


This is a WORK IN PROGRESS!!
Expect constant updates and buggy content.


see full version history at 
https://github.com/patrick4007019/khanacademy/commits/main/stranded%20khan

*/

//cheaty jshint stuff to make KA code more es6 â†“
//jshint asi: true 
//jshint esnext: true

//put your save code here:

//{
let saveCode = (true !== true) ? "" : 
"0 -677 51 500 0.65 6.653 100 100 83 88 [0,-576.5,851.4,[2,-536.5,831.4,[1,-516.5,831.4,[2,-496.5,831.4,[2,-596.5,931.4,[1,-576.5,811.4,[2,103.5,-548.6,[0,83.5,-528.6,[2,-1256.5,-528.6,[1,-1196.5,-568.6,[1,-616.5,871.4,[1,-516.5,811.4,[1,143.5,-548.6,[0,-616.5,891.4,[1,143.5,-568.6,[2,183.5,-508.6,[0,-1116.5,-528.6,[1,103.5,-448.6,[2,-1276.5,-568.6,[2,123.5,-508.6,[0,-1196.5,-468.6,[0,-1196.5,-448.6,[0,-1296.5,151.4,[2,-476.5,871.4,[2,203.5,-468.6,[2,-1096.5,-508.6,[2,-1236.5,191.4,[0,-1216.5,211.4,[1,-576.5,931.4,[1,123.5,-568.6,[1,-1256.5,-468.6,[2,-1256.5,131.4,[2,-476.5,811.4,[0,163.5,-548.6,[2,-1176.5,-528.6,[0,-1196.5,151.4,[2,-1156.5,-488.6,[1,-1336.5,191.4,[1,223.5,-528.6,[1,-1236.5,-448.6,[0,-1216.5,171.4,[1,-1216.5,-448.6,[1,-1316.5,151.4,[1,-556.5,891.4,[2,183.5,-508.6,[0,183.5,-548.6,[2,-1256.5,151.4,[2,-456.5,831.4,[1,-1296.5,-548.6,[3,103.5,-508.6,[2,-616.5,971.4,[0,163.5,-488.6,[1,-1176.5,-508.6,[1,63.5,-528.6,[2,-1176.5,-468.6,[2,-1316.5,251.4,[2,-536.5,951.4,[0,163.5,-428.6,[2,-1196.5,-548.6,[3,-1196.5,251.4,[1,83.5,-428.6,[2,63.5,-568.6,[1,-1296.5,-488.6,[1,-1276.5,191.4,[2,-576.5,-548.6,[0,-1056.5,-568.6,[0,-1216.5,251.4,[0,-536.5,-528.6,[0,183.5,-568.6,[1,-516.5,971.4,[2,203.5,-568.6,[2,-536.5,911.4,[0,-1236.5,-548.6,[1,-516.5,-528.6,[2,63.5,-548.6,[0,-1256.5,-568.6,[1,-1196.5,211.4,[3,-596.5,-508.6,[1,-1136.5,-528.6,[0,-596.5,-548.6,[2,-1276.5,-548.6,[1,-516.5,891.4,[0,123.5,851.4,[0,-1316.5,-568.6,[2,203.5,-388.6,[0,123.5,871.4,[0,-1276.5,191.4,[1,123.5,-488.6,[0,-1176.5,231.4,[2,-556.5,-468.6,[2,83.5,911.4,[1,-1076.5,-468.6,[2,-576.5,871.4,[1,203.5,-488.6,[2,-1176.5,-508.6,[2,-1156.5,291.4,[2,-536.5,-508.6,[1,-556.5,851.4,[2,63.5,-508.6,[2,143.5,851.4,[3,-1156.5,-468.6,[0,-576.5,911.4,[0,-1236.5,271.4,[2,-596.5,-468.6,[1,-576.5,271.4,[1,63.5,-488.6,[0,-1216.5,-528.6,[0,183.5,-448.6,[1,-1236.5,231.4,[2,-1196.5,911.4,[1,-556.5,271.4,[1,-596.5,791.4,[2,243.5,831.4,[0,-1296.5,251.4,[2,-576.5,-448.6,[3,123.5,-468.6,[2,-1256.5,251.4,[1,-1296.5,891.4,[0,103.5,931.4,[2,-1176.5,171.4,[0,-1276.5,791.4,[2,-576.5,951.4,[2,-1096.5,-528.6,[0,163.5,-568.6,[3,-1336.5,151.4,[1,-596.5,831.4,[0,143.5,-428.6,[2,203.5,931.4,[1,-1276.5,-468.6,[0,-1316.5,171.4,[1,-576.5,791.4,[1,163.5,71.4,[0,-1236.5,971.4,[1,-576.5,771.4,[0,103.5,-468.6,[1,223.5,851.4,[0,-1256.5,111.4,[1,183.5,-428.6,[0,183.5,1011.4,[2,-576.5,911.4,[0,63.5,-428.6,[2,-1076.5,-528.6,[3,-1296.5,151.4,[1,-1316.5,911.4,[2,-576.5,811.4,[2,243.5,211.4,[1,-1216.5,-488.6,[1,-1336.5,851.4,[0,223.5,-408.6,[1,143.5,911.4,[1,-1076.5,-508.6,[0,-1156.5,251.4,[0,-636.5,-548.6,[2,243.5,-408.6,[3,83.5,871.4,[1,-1196.5,-548.6,[0,-1136.5,251.4,[2,-496.5,-528.6,[0,-1176.5,851.4,[2,-556.5,-508.6,[2,-596.5,-548.6,[1,103.5,271.4,[2,183.5,891.4,[0,-1316.5,791.4,[0,-496.5,951.4,[1,223.5,-368.6,[0,-1236.5,-548.6,[1,-1216.5,171.4,[0,103.5,-488.6,[2,-1216.5,-548.6,[2,-1256.5,871.4,[0,-696.5,-488.6,[0,-556.5,871.4,[1,183.5,-508.6,[1,-1236.5,-528.6,[1,-1136.5,911.4,[2,-616.5,191.4,[2,-536.5,911.4,[1,103.5,851.4,[0,-556.5,851.4,[1,-1156.5,-528.6,[0,-1176.5,831.4,[0,83.5,-488.6,[1,-1136.5,-528.6,[1,-1236.5,891.4,[1,-1176.5,-428.6,[1,-1236.5,851.4,[0,-596.5,871.4,[1,-1256.5,911.4,[1,183.5,-468.6,[3,-616.5,-528.6,[0,203.5,-508.6,[2,-1156.5,-448.6,[2,-1176.5,251.4,[1,-536.5,-508.6,[2,-1276.5,911.4,[2,-536.5,891.4,[3,183.5,971.4,[1,-1316.5,231.4,[0,-456.5,-468.6,[2,-1316.5,951.4,[1,-516.5,911.4,[1,143.5,931.4,[0,-1276.5,-488.6,[1,-1256.5,151.4,[1,-1216.5,831.4,[0,-1196.5,-528.6,[1,-1296.5,851.4,[2,123.5,891.4,[2,-1156.5,831.4,[0,-556.5,-408.6,[0,-556.5,831.4,[1,223.5,831.4,[1,-1156.5,-528.6,[0,-596.5,-448.6,[1,-616.5,171.4,[1,203.5,-448.6,[2,-1276.5,151.4,[1,-476.5,851.4,[1,-616.5,131.4,[2,203.5,-548.6,[2,63.5,891.4,[1,-1116.5,-548.6,[0,-1216.5,911.4,[2,-536.5,-568.6,[0,103.5,-468.6,[1,-1096.5,-468.6,[1,-556.5,-468.6,[2,163.5,-528.6,[2,-1236.5,851.4,[0,-576.5,-548.6,[1,-1276.5,191.4,[1,-556.5,971.4,[0,-1196.5,91.4,[2,-476.5,-508.6,[1,-496.5,131.4,[2,83.5,-568.6,[0,-416.5,-528.6,[2,123.5,-408.6,[0,243.5,891.4,[0,-1196.5,-508.6,[2,-1236.5,171.4,[0,-1176.5,991.4,[2,-396.5,-528.6,[0,-536.5,851.4,[1,203.5,891.4,[2,-1256.5,191.4,[1,-1276.5,871.4,[0,-616.5,-588.6,[1,-516.5,931.4,[1,-1296.5,-528.6,[2,123.5,-468.6,[1,83.5,191.4,[1,203.5,951.4,[1,-1296.5,-508.6,[2,63.5,-588.6,[1,-1316.5,251.4,[0,-1296.5,951.4,[0,83.5,-588.6,[3,-1176.5,-488.6,[2,-1296.5,271.4,[2,-476.5,-448.6,[2,303.5,811.4,[1,-1116.5,-468.6,[1,-1336.5,171.4,[2,-456.5,-528.6,[2,-1236.5,-508.6,[1,-476.5,-508.6,[1,223.5,171.4,[2,-1176.5,271.4,[1,-496.5,-508.6,[2,-556.5,-448.6,[2,63.5,-608.6,[0,-1256.5,791.4,[1,-616.5,-488.6,[2,163.5,-508.6,[1,-1236.5,-588.6,[2,-1276.5,851.4,[2,-1196.5,-488.6,[2,-1196.5,851.4,[0,223.5,911.4,[1,-1256.5,-588.6,[1,-1156.5,311.4,[1,-1176.5,851.4,[1,83.5,891.4,[0,-1176.5,-528.6,[1,-1136.5,311.4,[2,183.5,-488.6,[0,-436.5,-508.6,[0,-1196.5,-448.6,[1,-1196.5,311.4,[1,-1256.5,931.4,[0,-1136.5,191.4,[0,-1316.5,871.4,[0,-476.5,-548.6,[2,103.5,-528.6,[2,-1176.5,-428.6,[0,203.5,-348.6,[1,-1256.5,-608.6,[1,-1316.5,171.4,[1,-1196.5,1011.4,[1,-416.5,-468.6,[0,-1256.5,-628.6,[1,-1236.5,811.4,[0,103.5,1011.4,[2,-1236.5,-628.6,[0,-1216.5,171.4,[0,-1156.5,931.4,[2,-556.5,-508.6,[1,143.5,931.4,[2,-1056.5,-528.6,[0,-1216.5,251.4,[0,-596.5,-488.6,[1,-616.5,211.4,[2,243.5,-488.6,[1,243.5,911.4,[1,203.5,-508.6,[0,283.5,871.4,[0,-1176.5,-568.6,[2,-1276.5,131.4,[0,143.5,-568.6,[2,183.5,1011.4,[0,-1196.5,171.4,[0,223.5,-468.6,[1,-1176.5,131.4,[2,-1256.5,971.4,[0,143.5,871.4,[0,-1236.5,-488.6,[2,-1196.5,111.4,[0,-516.5,-428.6,[0,203.5,1011.4,[1,-1316.5,851.4,[0,223.5,1011.4,[0,-1196.5,-508.6,[1,-396.5,-488.6,[0,103.5,911.4,[1,-1296.5,231.4,[2,-1236.5,971.4,[1,-676.5,-468.6,[0,-1316.5,831.4,[2,203.5,851.4,[0,-656.5,-488.6,[2,-616.5,-488.6,[2,203.5,911.4,[1,-616.5,-468.6,[2,183.5,871.4,[2,-1216.5,91.4,[2,-576.5,-428.6,[1,-1216.5,111.4,[1,-536.5,271.4,[0,-1236.5,931.4,[1,-636.5,191.4,[2,-1356.5,211.4,[1,-596.5,-448.6,[1,263.5,231.4,[2,-1276.5,911.4,[0,-616.5,-568.6,[2,163.5,1011.4,[0,-1296.5,911.4,[0,-1316.5,811.4,[0,-456.5,-488.6,[1,163.5,911.4,[0,-1216.5,851.4,[2,-436.5,-488.6,[0,-1296.5,211.4,[2,-596.5,-548.6,[1,-1276.5,211.4,[1,-416.5,-488.6,[1,-616.5,271.4,[1,-1196.5,231.4,[1,-496.5,-488.6,[1,-1216.5,231.4,[0,-1296.5,871.4,[2,-1276.5,851.4,[1,283.5,851.4,[1,-576.5,-528.6,[0,-556.5,-528.6,[0,-1316.5,931.4,[1,-636.5,-468.6,[2,43.5,951.4,[1,-556.5,-528.6,[1,23.5,951.4,[1,-516.5,-548.6,[0,243.5,991.4,[1,123.5,151.4,[0,143.5,891.4,[2,-1296.5,931.4,[1,-496.5,-448.6,[0,183.5,991.4,[1,223.5,851.4,[0,223.5,811.4,[2,-1336.5,871.4,[0,-696.5,-488.6,[0,-1136.5,911.4,[1,-696.5,-508.6,[1,243.5,211.4,[2,-1116.5,911.4,[2,-456.5,-488.6,[1,-556.5,111.4,[2,183.5,871.4,[0,-1096.5,931.4,[1,-576.5,-528.6,[1,143.5,991.4,[2,103.5,971.4,[0,-516.5,-568.6,[0,-1136.5,851.4,[1,-1276.5,791.4,[2,143.5,971.4,[1,-1296.5,951.4,[1,-1276.5,951.4,[1,103.5,151.4,[3,-1276.5,971.4,[2,-636.5,-508.6,[1,-1316.5,931.4,[1,-476.5,-488.6,[1,243.5,871.4,[3,-1316.5,911.4,[0,-476.5,-468.6,[2,163.5,931.4,[1,-596.5,111.4,[1,123.5,131.4,[2,143.5,931.4,[2,123.5,891.4,[1,-1216.5,991.4,[0,-1236.5,991.4,[2,-616.5,-588.6,[0,243.5,851.4,[0,-536.5,-448.6,[1,-1256.5,891.4,[2,243.5,1011.4,[2,-1256.5,811.4,[1,243.5,1031.4,[2,163.5,911.4,[1,-1096.5,851.4,[1,-1316.5,851.4,[2,183.5,831.4,[0,-1296.5,891.4,[0,303.5,871.4,[2,-1236.5,791.4,[1,163.5,1031.4,[2,-1176.5,931.4,[1,-1176.5,951.4,[0,-1216.5,951.4,[2,163.5,971.4,[0,123.5,951.4,[2,-1336.5,811.4,[1,123.5,191.4,[2,123.5,931.4,[2,-1236.5,911.4,[0,-1216.5,911.4,[1,143.5,931.4,[0,-1216.5,931.4,[0,-1296.5,811.4,[2,-1296.5,831.4,[1,-1216.5,811.4,[1,83.5,131.4,[3,-1196.5,831.4 0,1,0,0,1,0,0,0,19,-4,-18 6,1,1,0,1,1,0,0,0,1 [1,-1216.5,211.4,[1,-1216.5,191.4,[0,-1256.5,-548.6,[0,-1276.5,131.4,[1,-516.5,871.4,[0,-1276.5,-508.6,[0,-576.5,851.4,[0,-496.5,871.4,[0,203.5,-428.6,[0,163.5,-448.6,[1,-1236.5,-488.6,[0,-1256.5,191.4,[0,-576.5,-488.6,[1,-1176.5,-548.6,[1,-1256.5,-488.6,[0,-1256.5,171.4,[1,-1256.5,171.4,[0,-576.5,-468.6,[1,123.5,891.4,[0,123.5,851.4,[1,-596.5,-468.6,[1,-536.5,-488.6,[0,-616.5,191.4,[0,-1216.5,231.4,[0,103.5,911.4,[0,-516.5,-508.6,[0,-516.5,191.4,[1,-616.5,-508.6,[0,-436.5,-508.6,[1,-596.5,-508.6,[0,143.5,911.4,[0,183.5,851.4,[1,-1196.5,851.4,[1,143.5,951.4,[1,-1216.5,831.4 2"
//} savecode
//{
let tools = [
    0,0,0,0,0,
    0,0,0,0,0,
    0,0
]
let tnames = [
    "Stone Tool", "Crude Axe", "Refined Knife", "Fire", "Kindling", 
    "Fishing Spear", "Water Still", "Shelter", "Wooden Crate","Wooden Torch", 
    "Raft Foundation"
]
let res = [
    0,0,0,0,0,
    0,0,0,0,0,
    0
] 
/*
stone, fibrous leaves, lashing, sticks, palm leaves, 
coconut, drinkable coconut, raw meat, cooked meat, sardine
cloth
*/

//} resources
let islandSize = 500
let skip = false
//{
noStroke()
let ran = round(random(0, 10000))
let press = false, canpress = true
let sc = "home", keys = [], seed = new Random(ran), bs = [], pd = 0, loading, islands = [], dup = false, finish = false, check = 0, ps = false, con2 = false, trees = [], on = 0, others = [], dl = false, pushing = false, removed = false, check = 0, menu = 0, invm = [], che = 0, doing3 = false, zoomed = false, wm = 0, advance = false, equipped = "none", pressed = false, actual = 0, climbed = false, builds = [], totalweight = 0, not = [], nfish = 500+random(0, 1000), dead = false, dwid = 1300, scroll = false, pulsation = 0, lant = 0, invy = 176, maxox = 100, des = [], saved = false, slopen = false, shours = 5, shou = 6, sleeping = false, endt = 0, stt = 0, cause = "", hig, rafts = [], onraft = false

let tcontrol = "Arrow Keys to move\nA to open crafting menu\nF to open inventory\nZ to open pause game\nE to interact with an item\nG to zoom out (developer function)"
let hm = [
    "00000000330000000",
    "00000333133000000",
    "00033311113300000",
    "00331111213330000",
    "03331112211130000",
    "00311222221130000",
    "0333112222113000",
    "00331122211330",
    "000331122211330",
    "00331112211133000",
    "00033311111133000",
    "00000333113300000",
    "00000003333000000"
]
let c1 = color(0, 0, 150)
//}
let px = 0, py = 0, hr = 6, ox = 100, he = 100, hunger = 100, sleep = 100, thirst = 100, f = 1, skill = [[3, 0], [0, 0], [0, 0]], day = 1, ts = 0.9
//{
let des = ["Primitive cutting tool", "Better cutting tool that can cut down palm trees", "Primitive knife to skin seafood",  "A small campfire to produce warmth and cook food", "Some wood to start a fire, also really good firewood.", "A sharp stick that kills fish", "A water purifier that relies on the sun and palm leaves", "A place to sleep", "Extra storage space", "A hand-held source of light", "A bunch of sticks arranged in a format so that you can step onto them", "A simple, manual raft that allows you to traverse the ocean without getting wet!"]

let ddes = [["Rock", "Rock", "A hunk of stone. Could be useful for crafting tools.", 0], ["Stick", "Stick", "A rough wood shaft. Could be useful for crafting tools.", 0], ["PSapling", "Palm Sapling", "A small palm tree. Could be harvested for fibrous leaves.", 1], ["Palm", "Palm Tree", "A large tropical tree that might bear coconuts, but will always yield a lot of wood and leaves.", 2], ["Cloth", "Cloth", "A square strip of cloth. Wonder how it got here.", 0], ["Yucca", "Yucca Tree", "A smaller tree that has fibrous leaves. Could be used to make rope.", 1], ["PaddleRaft", "Paddle Raft", des[10], 3]]


//} descriptions
//{

//load speed
let loadSpeed = 2
//player speed 
let spd = 0.5, defaultspd = 0.5
//render distance
let render = 600
// max weight
let maxweight = 30
//} setting vars
//{
function df(e) {
    return round(dist(e.x, e.y, 140, 140))
} 
function df2(e) {
    return round(dist(e.x, e.y, 150, 150))
}
function Stick(x, y) {
    this.x = x
    this.y = y
    this.draw = function() {
        noStroke()
strokeWeight(0.8)
if(hig === this) {stroke(255*f)}
        fill(f*150, 0, 0)
        rect(this.x+9, this.y+4, 3, 12)
    }
}
function Palm(x, y) {
    this.x = x
    this.y = y
    this.he = 1
    this.rand = seed.nextGaussian()
    this.coco = true
    this.isclimbed = false
    this.draw = function() {
        pushMatrix()
        translate(this.x+8, this.y+8)
        scale(this.he)
        stroke(0, f*150, 0)
        if(hig === this) {stroke(0, f*220, 0)}
        strokeWeight(0.8)
        fill(0, f*255, f*98)
        rect(-6, -6, 16, 16, 3)
        fill(0, f*255, f*150)
        rect(-3, -3, 10, 10, 3)
        fill(255, 255, 255)
        if(!keys.c) {climbed = false; this.isclimbed = false}
        popMatrix()
        if(this.he >= 0.7 && this.rand < -0.3 && this.coco) {
            noStroke()
            pushMatrix()
            translate(this.x+8, this.y+8)
            scale(this.he)
            fill(f*100, 0, 0)
            ellipse(3, 3, 4, 4)
            popMatrix()
            if(this.x > 125 && this.x < 155 && this.y > 125 && this.y < 155) {
                fill(255, 255, 255)
                textSize(7)
                climbed = keys.c
                if(keys.c) {
                    this.isclimbed = true
                }
            }
            if(this.isclimbed) { text("E to pick coconut", 25, 270)}
            if(climbed && this.isclimbed && keys.e && this.coco) {
                not.push([1, "Coconut", 100, "Pickup"])
                this.coco = false
                res[5]++
            }
        }
    }
}
function Yucca(x, y) {
    this.x = x
    this.y = y
    this.he = 1
    this.draw = function() {
        pushMatrix()
        translate(this.x+8, this.y+8)
        scale(this.he)
        stroke(0, f*150, 0)
        if(hig === this) {stroke(0, 190*f, 0)}
        strokeWeight(0.8)
        fill(0, f*100, f*50)
        rect(-6, -6, 16, 16, 3)
        fill(0, f*200, f*100);
        rect(-3, -3, 10, 10, 3)
        popMatrix()
    }
}
function Rock(x, y) {
    this.x = x
    this.y = y
    this.draw = function() {
        fill(f*100, f*100, f*100)
        stroke(f*50, f*50, f*50)
        if(hig === this) {stroke(255*f)}
        strokeWeight(0.8)
        rect(this.x+8, this.y+8, 4, 4)
    }
}
function PSapling(x, y) {
    this.x = x
    this.y = y
    this.he = 1
    this.draw = function() {
        fill(f*100, f*255, f*100)
        stroke(f*50, f*50, f*50)
        if(hig === this) {stroke(255*f)}
        strokeWeight(0.8)
        rect(this.x+8, this.y+8, 5*this.he, 5*this.he)
    }
}
function Cloth(x, y) {
    this.x = x
    this.y = y
    this.he = 1.5
    this.draw = function() {
        fill(57*f, f*99, f*222)
        stroke(f*50, f*50, f*50)
        if(hig === this) {stroke(255*f)}
        strokeWeight(0.8)
        rect(this.x+8, this.y+8, 5*this.he, 5*this.he)
    }
}
//} plant/resource constructors
//{
function Fire(x, y) {
    this.x = x
    this.y = y
    this.fuel = 3
    this.started = false
    this.open = false
    this.heat = 0
    this.name = "Fire"
    this.cooking = "None"
    this.timer = 0
    this.done = false
    this.start = function() {
        if(this.started) {
            noStroke()
            fill(255, 100, 0)
            ellipse(this.x, this.y, 9, 9)
            this.fuel -= 0.000436*ts
            if(this.fuel < 0) {
                this.started = false
                this.fuel = 2
            }
        }
        if(this.cooking !== "None" && !this.done) {
            this.timer -= 0.0436*ts*6/10
            if(this.timer < 0) {
                this.done = true
            }
        }
    }
    this.draw = function() {
        pushMatrix()
        translate(this.x, this.y)
        fill(150, 0, 0)
        rotate(45)
        noStroke();
        scale(1.4)
        if(hig === this) {stroke(255); strokeWeight(0.8)}
        rect(-1, -5, 2, 10)
        rect(-5, -1, 10, 2)
        scale(0.9)
        popMatrix()
        pushMatrix()
        translate(0, -250)
        if(!this.started) {
            fill(255, 100, 0)
            noStroke()
            rect(20, 500, 3, -this.heat*2.2)
        }
        popMatrix()
        if(hig === this && equipped === "Kindling") {
            let mov = [abs(mouseX-pmouseX), abs(mouseY-pmouseY)]
            this.heat += mov[0]/100+mov[1]/100
            this.heat -= 0.3
            this.heat = constrain(this.heat, 0, 100)
            if(this.heat >= 100) {
                this.started = true
                tools[4] --
                this.heat = 0
            }
        }
        if(hig !== this) {this.heat = 0}
        this.start()
    }
}
function WStill(x, y) {
    this.x = x
    this.y = y
    this.fuel = 25
    this.water = 25
    this.name = "Water Still"
    this.d = function() {
        pushMatrix()
        translate(this.x, this.y)
        fill(0, f*255, f*150)
        strokeWeight(0.5)
        stroke(0)
        if(hig === this) {stroke(255); strokeWeight(1)}
        rect(-5.5, -5.5, 13, 13, -3)
        popMatrix()
    }
    this.draw = function() {
        let fclose = this.x > 135 && this.x < 165 && this.y > 135 && this.y < 165
        this.d()
        if(this.fuel > 0 && this.water < 100) {
            this.fuel -= 0.008
            this.water += 0.013
        }
    }
}
function Shelter(x, y) {
    this.x = x
    this.y = y
    this.prog = 0
    this.name = "Shelter"
    this.sleep = function() {
        if(keys.e && df(this) < 20) {
            slopen = true
        }
    }
    this.draw = function() {
        pushMatrix()
        translate(this.x, this.y)
        fill(0, f*130, 0)
        stroke(f*100, 0, 0)
        strokeWeight(2)
        rect(-4, -7, 8,14, 3)
        popMatrix()
        this.sleep()
    }
}
function Crate(x, y) {
    this.x = x
    this.y = y
    this.name = "Wooden Crate"
    this.open = false
    this.stuff = []
    this.draw = function() {
        pushMatrix()
        translate(this.x, this.y)
        fill(f*200, f*130, f*150)
        stroke(100, 0, 0)
        strokeWeight(2)
        rect(-6, -6, 12, 12, 2)
        popMatrix()
    }
}
//} building constructors
//{
function firemenu() {
    let fires = builds.filter(function(e) {return e.name === "Fire"})
    let fire = fires.filter(function(e) {return hig === e})[0]
    if(fire && fire.started) {
        fill(0)
        rect(150, 130, 300, 100)
        if(mouseX > 150 && mouseX < 450 && mouseY > 100 && mouseY < 230 && press && fire.done) {
            if(fire.cooking === "Raw Meat") {res[8]++}
            fire.done = false
            fire.cooking = "None"
        }
        textSize(14.5)
        fill(mouseX > 160 && mouseX < 280 && mouseY >140 && mouseY < 165 ? (res[7] > 0 ? color(100, 100, 100) : color(128, 12, 12)) : (res[7] > 0 ? color(163, 161, 161) : color(250, 3, 3)))
        text("Raw Meat (" + res[7] + ")", 170, 155)
        if(mouseX > 160 && mouseX < 280 && mouseY > 140 && mouseY < 165 && res[7] > 0 && press && fire.cooking === "None") {
            res[7] --
            fire.cooking = "Raw Meat"
            fire.timer = 45
        }
        fill(0)
        rect(150, 400, 300, 100)
        fill(255)
        text("Cooking: ", 300, 155)
        fill(fire.done ? color(0, 200, 0) : color(255, 255, 255))
        text(fire.done ? (fire.cooking + "\nClick to collect") : fire.cooking + "\n" + round(fire.timer) + "m", 300, 185)
        fill(255)
        textSize(20)
        text("Fuel:", 170, 430)
        textSize(17)
        text(floor(fire.fuel) + "h " + round(fire.fuel*60)%60+ "m", 165, 455)
        textSize(19)
        text("Add Fuel", 270, 430)
        textSize(15)
        fill(mouseX > 260 && mouseX < 385 && mouseY > 445 && mouseY < 468 ? (res[3] > 0 ? color(100, 100, 100) : color(128, 12, 12)) : (res[3] > 0 ? color(163, 161, 161) : color(250, 3, 3)))
        text("Stick (" + res[3] + ")", 270, 460)
        fill(mouseX > 260 && mouseX < 385 && mouseY > 468 && mouseY < 490 ? (tools[4] > 0 ? color(100, 100, 100) : color(128, 12, 12)) : (tools[4] > 0 ? color(163, 161, 161) : color(250, 3, 3)))        
        text("Kindling (" + tools[4] + ")", 270, 480)
        if(res[3] > 0 && mouseX > 260 && mouseX < 385 && mouseY > 445 && mouseY < 468 && press) {
        res[3] --
        fire.fuel += 0.5
    }
    if(tools[4] > 0 && mouseX > 260 && mouseX < 385 && mouseY > 468 && mouseY < 490 && press) {
        tools[4] --
        fire.fuel += 2
    }
    }
}
function watermenu() {
    let stills = builds.filter(function(e) {return e.name === "Water Still"})
    let still = stills.filter(function(e) {return hig === e})[0]
    if(still) {
        noStroke()
        fill(0)
        rect(150, 400, 300, 100)
        rect(150, 400, 300, 100)
        fill(255)
        text("Water\nFuel", 165, 425)
        fill(80)
        rect(230, 419, 150, 5)
        rect(230, 439, 150, 5)
        fill(13, 96, 184)
        rect(230, 419, still.water*1.5, 5)
        fill(150)
        rect(230, 439, still.fuel*1.5, 5)
        fill(255)
        textSize(17)
        text("Add Fuel", 165, 475) 
        fill(0, 0, 255)
        rect(390, 410, 50, 25)
        if(mouseIsPressed && mouseX > 390 && mouseX < 440 && mouseY > 410 && mouseY < 435 && thirst < 99.5 && still.water > 0.5) {
            still.water -= 0.5
            thirst += 0.5
        }
        fill(255)
        textSize(13)
        text("Drink", 395, 425)
        textSize(14)
        fill(mouseX > 260 && mouseX < 385 && mouseY > 450 && mouseY < 473 ? (res[1] > 0 ? color(100, 100, 100) : color(161, 12, 12)) : (res[1] > 0 ? color(163, 161, 161) : color(250, 3, 3)))
        text("Fibrous Leaves (" + res[1] + ")", 270, 465)
        fill(mouseX > 260 && mouseX < 385 && mouseY > 473 && mouseY < 495 ? (res[4] > 0 ? color(100, 100, 100) : color(161, 20, 20)) : (res[4] > 0 ? color(163, 161, 161) : color(250, 3, 3)))        
        text("Palm Leaves (" + res[4] + ")", 270, 485)
        
        if(press && mouseX > 260 && mouseX < 385 && mouseY > 450 && mouseY < 473 && still.fuel < 90 && res[1] > 0) {
            res[1] --
            still.fuel += 10
        }
        if(press && mouseX > 260 && mouseX < 385 && mouseY > 473 && mouseY < 495 && still.fuel < 80 && res[4] > 0) {
            res[4] --
            still.fuel += 20
        }
    }
}
//} building menus
//{
function PaddleRaft(x, y) {
    this.x = x
    this.y = y
    this.on = false
    this.grounded = false
    this.draw = function() {
        stroke(0)
        pushMatrix()
        translate(this.x, this.y)
        if(this.on && !this.grounded) {
            rotate(pd)
        }
        if(hig === this) {stroke(255*f)}
        rect(-6.5, -11, 12, 20)
        if(press) {
            onraft = false
            this.on = false
        }
        if(keys.e && hig === this && !this.on) {
            this.on = true
            pd = 0
            const x = 150-this.x
            const y = 150-this.y
            let items = bs.concat(trees).concat(others).concat(builds).concat(rafts)
            for(let i = 0; i < items.length; i++) {
                items[i].x += x
                items[i].y += y
            }
        }
        popMatrix()
    }
}
function raft() {
    onraft = rafts.some(function(e) {return e.on})
    if(rafts.includes(hig) && !onraft) {
        textAlign(CENTER)
        fill(255)
        text("Press E to get on raft", 300, 450)
    }
    if(onraft) {
        fill(255)
        text("Arrow keys to paddle\nClick to exit raft", 30, 550)
        rafts.sort(function(a,b) {return df(a)-df(b)})
        const raftt = rafts.filter(function(e) {return e.on})[0]
        const dist = bs.filter(function(e) {return df(e) < 100}).sort(function(a,b) {return df2(a)-df2(b)}).map(function(e) {return df2(e)})[0]
        
        const mult = dist < 30 ? 0.1 : dist < 45 ? 0.2 : dist < 70 ? 0.4 : dist < 90 ? 0.8 : 1
        
        const tx = mult === 0.1 ? "0.1x speed due to land proximity" : mult === 0.2 ? "0.2x speed due to land proximity" : mult === 0.4 ? "0.4x speed due to land proximity" : mult === 0.8 ? "0.8x speed due to land proximity" : ""
        
        fill(mult === 0.1 ? color(255, 0, 0) : mult === 0.2 ? color(200, 100, 50) : mult === 0.4 ? color(150, 150, 0) : mult === 0.8 ? color(100, 200, 0) : color(255))
        textSize(14)
        if(!raftt.grounded) {text(tx + "\n", 150, 400)}
        
        fill(255, 0, 0)
        text(dist < 40 && !raftt.grounded ? "Grounding Risk!" : "", 150, 430)
        
        if(on) {
            raftt.grounded = true
        }
        if(raftt.grounded) {text("Raft is grounded and unusable!", 150, 430)}
        
        const x = keys[RIGHT] ? -1 : keys[LEFT] ? 1 : 0 
        const y = keys[UP] ? 1 : keys[DOWN] ? -1 : 0
        
        let items = bs.concat(trees).concat(others).concat(builds).concat(rafts.slice(1, rafts.length-1))
        if(!raftt.grounded) {for(let i = 0; i < items.length; i++) {
            items[i].x += x/4*mult
            items[i].y += y/4*mult
        }}
    }
}

//} rafts
//{
function notif() {
    textAlign(LEFT)
    for(let i = 0; i < not.length; i++) {
        textSize(15)
    if(not[i]) {
        not[i][2] -= 0.25
        
        let col
        let tt
        switch(not[i][3]) {
            
case "Pickup": 
col = color(not[i][2]*1.5, not[i][2]*1.5, 155+not[i][2]); 
tt = "+" + not[i][0] + " " + not[i][1]; break
case "Drop": 
col = color(not[i][2]*2.5, not[i][2]*1.5, not[i][2]*1.5); 
tt = "-" + not[i][0] + " " + not[i][1]; break
case "Heavy": 
col = color(not[i][2]*2.5, not[i][2]*1.5, 155+not[i][2]); 
tt = "You're carrying too much!"; break
case "Close": 
col = color(not[i][2]*2.5, not[i][2]*2.5, 155+not[i][2]*2.5); 
tt = "Building placed too close to another building!"; break
case "Inventory": 
col = color(not[i][2]*2.5, not[i][2]*1.5, 155+not[i][2]); 
tt = "Storage space full!"; break

        }
        
        fill(col)
        text(tt, 15, 60+i*20)
        
        if(not[i][2] < 15) {not.splice(i, 1)}
    }
    }
    if(not.length > 25) {not.shift()}
    textAlign(LEFT)
}
//} notifications 
//{
function Land(x, y) {
    {
    this.x = x
    this.y = y
    this.checked = 0
    this.rand = seed.nextGaussian()
    this.lit = false
    }
    this.checkonly = function() {
       if(check === 0) {
        this.count = 0
        for(let i = 0; i < bs.length; i++) {
            if(
            (bs[i].x === this.x-20 && bs[i].y === this.y) ||
            (bs[i].x === this.x+20 && bs[i].y === this.y) ||
            (bs[i].x === this.x && bs[i].y === this.y-20) || 
            (bs[i].x === this.x && bs[i].y === this.y+20) ||
            (bs[i].x === this.x-20 && bs[i].y === this.y-20) ||
            (bs[i].x === this.x-20 && bs[i].y === this.y+20) ||
            (bs[i].x === this.x+20 && bs[i].y === this.y-20) ||
            (bs[i].x === this.x+20 && bs[i].y === this.y+20)
            ) {
                this.count++
            }
        }
       }
    }
    this.check = function() {
        if(check === 0) {
        this.count = 0
        for(let i = 0; i < bs.length; i++) {
            if(
            (bs[i].x === this.x-20 && bs[i].y === this.y) ||
            (bs[i].x === this.x+20 && bs[i].y === this.y) ||
            (bs[i].x === this.x && bs[i].y === this.y-20) || 
            (bs[i].x === this.x && bs[i].y === this.y+20) ||
            (bs[i].x === this.x-20 && bs[i].y === this.y-20) ||
            (bs[i].x === this.x-20 && bs[i].y === this.y+20) ||
            (bs[i].x === this.x+20 && bs[i].y === this.y-20) ||
            (bs[i].x === this.x+20 && bs[i].y === this.y+20)
            ) {
                this.count++
            }
        }
        if(this.count > 9) {
            if(this.rand < -1.1) {trees.push(new Palm(this.x, this.y))}
            if(this.rand > 0.25 && this.rand < 0.5) {trees.push(new Yucca(this.x, this.y))}
        }
        if(this.rand > -1 && this.rand < -0.5) {
            others.push(new Rock(this.x, this.y))
        }
        if(this.rand > -0.1 && this.rand < 0.24) {others.push(new Stick(this.x, this.y))}
        }
        if(this.rand > -0.5 && this.rand < -0.1) {others.push(new PSapling(this.x, this.y))}
        if(this.rand > 2.2) {others.push(new Cloth(this.x, this.y))}
    }
    this.draw = function() {
        let ff
        if(hr > 18 || hr < 6) {
        let fires = builds.filter(function(e) {return e instanceof Fire})
        let that = this
        let closefires = fires.filter(function(e) {return dist(e.x, e.y, that.x+10, that.y+10) < 35})
        let farfires = fires.filter(function(e) {return dist(e.x, e.y, that.x+10, that.y+10) < 55})
        ff = closefires.length >= 1 && closefires.some(function(e) {return e.started}) ? 0.8 : farfires.length >= 1 && farfires.some(function(e) {return e.started}) ? 0.2 : f
        } else {
            ff = f
        }
        let dis = dist(this.x, this.y, 140, 140)
        if(equipped === "Wooden Torch" && dis < 30) {
            ff = 1
        }
        this.col = color(0, ff*(230-(this.count-8)*7), 0);
        if(this.count <= 9) {this.col = color(ff*255, ff*255, ff*150)}
        stroke(this.col)
        strokeWeight(1)
        fill(this.col)
        rect(this.x, this.y, 20, 20)
    }
    this.check()
}
function Island(x, y) {
    {
    this.x = x
    this.y = y
    this.n = seed.nextGaussian()
    this.ch = 0
    this.unique = []
    this.ri = 0
    this.sb = 0
    this.c = [new PVector(x, y)]
    this.dir = (this.n < -1 && new PVector(0, -20)) || (this.n > -1 && this.n < 0 && new PVector(20, 0)) || (this.n > 0 && this.n < 1 && new PVector(0, 20)) || (this.n > 1 && new PVector(-20, 0))
    this.finish = false
    this.final = false
    }
    this.lb = function() {
        this.n = seed.nextGaussian()
        this.dir = (this.n < -1 && new PVector(0, -20)) || (this.n > -1 && this.n < 0 && new PVector(20, 0)) || (this.n > 0 && this.n < 1 && new PVector(0, 20)) || (this.n > 1 && new PVector(-20, 0))
        if(this.c[this.ch]) {this.c.push(new PVector(this.c[this.ch].x+this.dir.x, this.c[this.ch].y+this.dir.y))}
        this.ch = abs(round(this.c.length*seed.nextGaussian()))
        this.ch = constrain(this.ch, 0, this.c.length-1)
    }
    this.rd = function() {if(this.removing) {
        for(let i = 0; i < 1; i++) {
        for(let j = 0; j < this.c.length; j++) {
            if(this.c[this.ri] && this.c[j] && this.c[this.ri].x === this.c[j].x && this.c[this.ri].y === this.c[j].y && this.ri !== j) {
                this.c.splice(j, 1) 
            }
        }
            this.ri++
        }
        if(this.ri >= this.c.length-2) {
            this.pushing = true

            dup = false
            this.finish = true
            this.removing = false
        }
        
    }}
    this.push = function() {
        if(this.c[this.sb]) {bs.push(new Land(this.c[this.sb].x, this.c[this.sb].y))}
        this.sb++
        
        if(this.sb >= this.c.length-1) {
            this.pushing = false
            this.final = true
        }
    }
}
for(let i = 1; i < 6; i++) {for(let j = 1; j < 6; j++) {
    islands.push(new Island(i*750-2150, j*750-2150))
}}
//} land constructors
//{
function pickup() {
    let uppable = others.filter(function(e) {return e.constructor === Rock || e.constructor === Stick || e.constructor === Cloth})
    if(keys.e) {for(let i = 0; i < uppable.length; i++) {
        if(uppable[i] === hig) {
            others.splice(others.indexOf(uppable[i]), 1)
            switch(uppable[i].constructor) {
                case Rock: res[0]++; break
                case Stick: res[3]++; break
                case Cloth: res[10]++; break
            }
    }}}
    /*
    if(uppable.some(function(e) {return df(e) < 15}) && keyIsPressed && key.toString() === "e") {
        if(totalweight < maxweight) {
            not.push([1, uppable[0].constructor.__name, 100, "Pickup"])
            others.splice(others.indexOf(uppable[0]), 1)
            switch(uppable[0].constructor) {
                case Rock: res[0]++; break
                case Stick: res[3]++; break
                case Cloth: res[10]++; break
            }
        } else {not.push([0, 0, 100, "Heavy"])}
    }
    */
}
function sapup() {
    let saplings = others.filter(function(e) {return e instanceof PSapling})
    saplings.sort(function(a,b) {return df(a)-df(b)})
    if(saplings.some(function(e) {return df(e) < 15}) && (equipped === "Stone Tool" || equipped === "Crude Axe")) {
        if(keys.e) {
            if(totalweight < maxweight) {
            saplings[0].he -= 0.01
            skill[1][1] += 0.002
            if(saplings[0].he <= 0) {
                not.push([1, "Fibrous Leaves", 100, "Pickup"])
                others.splice(others.indexOf(saplings[0]), 1)
                res[1]++
            }
            } else {not.push([0, 0, 100, "Heavy"])}
        }
    }
}
function treedown() {
    let cutting = trees.map(function(e) {return e})
    cutting.sort(function(a, b) {return df(a)-df(b)})
    if(cutting.some(function(e) {return df(e) < 18}) && equipped === "Crude Axe" && cutting[0] instanceof Palm) {
        if(keys.e) {
            if(totalweight < maxweight) {
            cutting[0].he -= 0.002
            skill[1][1] += 0.004
            if(cutting[0].he <= 0.3) {
                not.push([8, "Stick", 100, "Pickup"], [5, "Palm Leaves", 100, "Pickup"])
                trees.splice(trees.indexOf(cutting[0]), 1)
                res[3] += 8
                res[4] += 5
            }
            } else {
                not.push([0, 0, 100, "Heavy"])
            }
        }
    }
    if(cutting.some(function(e) {return df(e) < 18}) && (equipped === "Crude Axe" || equipped === "Stone Tool") && cutting[0].constructor === Yucca) {
        if(keys.e) {
            if(totalweight < maxweight) {
            skill[1][1] += 0.003
            cutting[0].he -= equipped === "Stone Tool" ? 0.0015 : 0.005
            if(cutting[0].he <= 0.3) {
                not.push([6, "Fibrous Leaves", 100, "Pickup"])
                trees.splice(trees.indexOf(cutting[0]), 1)
                res[1] += 6
            }
            } else {
                not.push([0, 0, 100, "Heavy"])
            }
        }
    }
}
//} picking up resources
function include() {
    let invs = [
["Stone", round(res[0]), 1, [0, 0], "A rock", 0],
["Fibrous Leaves", res[1], 0.1, [1, 0], "Leaves that can be made into rope", 0],
["Lashing", res[2], 0.4, [2, 0], "Some rope", 0],
["Stick", round(res[3]), 1, [3, 0], "A chunk of wood", 0],
["Palm Leaves", res[4], 0.5, [4, 0], "Produces water when evaporated in a water still"],
["Coconut", res[5], 2, [5, 0], "Should be husked before drinking", 3],
["Drinkable Coconut", res[6], 1, [6, 0], "A coconut, but drinkable", 2],
["Raw Meat", res[7], 0.5, [7, 0], "Don't eat this", 5],
["Cooked Meat", res[8], 0.5, [8, 0], "Eat this", 2],
["Sardine", res[9], 0.5, [9, 0], "Should be skinned before cooking", 4],
["Cloth", res[10], 0.2, [10, 0], "A thin square strip of cloth, could be pretty useful"]
]
// name, ? , weight, ? , description, 1(tool) 6(building), condition (tool only)
    let toolsm = [
["Stone Tool", tools[0], 1, [0, 1], des[0], 1],
["Crude Axe", tools[1], 4.4, [1, 1], des[1], 1],
["Refined Knife", tools[2], 2.4, [2, 1], des[2], 1],
["Fire", tools[3], 4, [3, 1], des[3], 6],
["Kindling", tools[4], 2, [4, 1],des[4], 1],
["Fishing Spear", tools[5], 1, [5, 1], des[5], 1],
["Water Still", tools[6], 6.8, [6, 1], des[6], 6],
["Shelter", tools[7], 7.7, [7, 1], des[7], 6],
["Wooden Crate", tools[8], 6.4, [8, 1], des[8], 6],
["Wooden Torch", tools[9], 1.6, [9, 1], des[9], 1],
["Raft Foundation", tools[10], 4, [10, 1], des[10], 1],
["Paddle Raft", tools[11], 4, [11, 1], des[11], 7]
    ]
    invm = []
    for(let i = 0; i < invs.length; i++) {if(res[i] > 0) {invm.push(invs[i])}}
    for(let i = 0; i < toolsm.length; i++) {if(tools[i] > 0) {invm.push(toolsm[i])}}
    totalweight = invm.reduce(function(a,b,i) {return a+(b[2]*b[1])}, 0)
    if(!scroll) {invm.splice(12, invm.length-12)}
    else {invm.splice(0, 12)}
}
//{
function drop() {
    let yx = invm.map(function(e, i) {return [e[0], e[3]]})
    for(let i = 0; i < yx.length; i++) {
        if(mouseX > 139 && mouseX < 470 && mouseY > invy+i*25 && mouseY < invy+25+i*25 && keys.q) {
            not.push([1, yx[i][0], 100, "Drop"])
            if(yx[i][1][1] === 0) {res[yx[i][1][0]] --}
            if(yx[i][1][1] === 1) {tools[yx[i][1][0]] --}
        }
    }
}
function place(thing, construct, tool) {
    let yx = invm.map(function(e) {return e[0]})
    if(mouseY > invy+yx.indexOf(thing)*25 && mouseY < invy+yx.indexOf(thing)*25+25 && on && tools[tool] >= 1) {
        if(builds
        .map(function(e) {return df(e)})
        .sort(function(a,b) {return a-b})
        .every(function(e) {return e > 25}) === true) {
        
            builds.push(new construct(150, 150))
            tools[tool] --
            not.push([1, thing, 100, "Drop"])
        } else {
            not.push([2, "", 100, "Close"])
        }
    }
}
function interaction() {
    let yx = invm.map(function(e) {return e[0]})
    let yy = tnames.map(function(e) {return [yx.indexOf(e), e]})
    if(press) {
        for(let i = 0; i < yy.length; i++) {
            if(mouseX > 139 && mouseX < 470 && mouseY > invy+yy[i][0]*25 && mouseY < invy+25+yy[i][0]*25) {
                equipped = yy[i][1]
            }
            if(yy[i][0] === -1 && equipped === yy[i][1]) {
                equipped = "none"
            }
        }
    }
    let cocon = yx.indexOf("Coconut"), drinka = yx.indexOf("Drinkable Coconut"), firea = yx.indexOf("Fire"), sard = yx.indexOf("Sardine"), cmeat = yx.indexOf("Cooked Meat"), wstill = yx.indexOf("Water Still"), shelt = yx.indexOf("Shelter"), praft = yx.indexOf("Paddle Raft")
    if(press) {
        if(mouseX > 139 && mouseX < 470 && menu === 1) {
        if(mouseY > invy+cocon*25 && mouseY < invy+25+cocon*25) {
            res[6] ++
            res[5] --
        }
        if(mouseY > invy+drinka*25 && mouseY < invy+25+drinka*25) {
            thirst += 20
            res[6] --
        }
        place("Fire", Fire, 3)
        place("Water Still", WStill, 6)
        place("Shelter", Shelter, 7)
        place("Wooden Crate", Crate, 8)
        if(mouseY > invy+sard*25 && mouseY < invy+25+sard*25 && equipped === "Refined Knife") {
            res[9] --
            res[7] ++
        }
        if(mouseY > invy+cmeat*25 && mouseY < invy+25+cmeat*25) {
            res[8] --
            hunger += 20
        }
        if(mouseY > invy+praft*25 && mouseY < invy+25+praft*25 && !on) {
            tools[11] --
            rafts.push(new PaddleRaft(150, 150))
        }
    }
    }
}
function inventory() {
    fill(100, 100, 155)
    stroke(50, 50, 50)
    rect(110, 80, 380, 440)
    fill(255, 255, 255)
    textSize(25)
    text("Inventory", 225, 120)
    textSize(21)
    text("Name      #     weight", 170, 155)
    textSize(10)
    text("Per/total", 375, 167)
    textSize(14)
    for(let i = 0; i < 12; i++) {
        noStroke()
        if(mouseX > 130 && mouseX < 470 && mouseY > 176+i*25 && mouseY < 176+25+i*25) {
            fill(120, 120, 180)
            rect(130, 178+i*25, 340, 25)
        }
    }
    fill(255, 255, 255)
    for(let i = 0; i < invm.length; i++) {
        textAlign(CENTER)
        textSize(13)
        text(invm[i][0], 195, invy+19+i*25)
        text(invm[i][1], 300, invy+19+i*25)
        text(invm[i][2] + "/" + round(invm[i][2]*invm[i][1]*10)/10, 395, invy+19+i*25)
    }
    if(invm.length < 12) {scroll = false}
    textAlign(LEFT)
    interaction()
    textSize(15)
    text("Total weight: " + round(totalweight*10)/10 + "/" + maxweight, 140, 505)
    text("Page " + (scroll ? 2 : 1) + "/" + (invm.length >= 12 || scroll ? 2 : 1), 390, 503)
    scroll = scroll && keys[UP] ? false : !scroll && keys[DOWN] ? true : scroll
    if(invm.length < 12) {scroll = false}
    for(let i = 0; i < 12; i++) {
        noStroke()
        if(mouseX > 130 && mouseX < 470 && mouseY > 176+i*25 && mouseY < 176+25+i*25) {
            if(invm[i]) {
                fill(0)
                textSize(13)
                textAlign(LEFT)
                rect(mouseX, mouseY, 200, 150)
                text(invm[i][4] + "\n\n" + (invm[i][5] === 1 ? "Click to equip" : invm[i][5] === 2 ? "Click to consume" : invm[i][5] === 3 ? "Click to Husk" : invm[i][5] === 4 ? "Click to skin (requires knife)" : invm[i][5] === 5 ? "Click to put on to fire (must be near one)" : invm[i][5] === 6 ? "Click to place building" : invm[i][5] === 7 ? "Click to drop raft" : "") + "\nQ to drop", mouseX+15, mouseY+15, 180, 600)
            }
        }
    }

}
//} inventory
//{
function craft(me, y, amounts, resources, name, current, ind, given, gam, lvl) {
    let norm1 = current.every(function(e, i) {return e >= amounts[i]})
    let norm2 = skill[0][0] > lvl
    let norm = norm1 && norm2 ? color(255, 255, 255) : color(150, 150, 200)

    if(wm === me) {
        
    fill(120, 120, 175)
    if(mouseX > 120 && mouseX < 480 && mouseY > y-25 && mouseY < y+25) {rect(125, y-28, 350, 50)}
    
    fill(norm)
    textSize(15)
    text(name, 150, y)
    fill(lvl < skill[0][0] ? color(255, 255, 255) : color(255, 0, 0))
    text(lvl, 460, y-10)
    fill(norm)
    textSize(13)
    for(let i = 0; i < amounts.length; i++) {
        fill(norm1 ? color(255, 255, 255) : color(255, 150, 150))
        text(amounts[i] + " " +  resources[i], 320, (y+i*14)-(amounts.length-1)*7+2)
    }
    if(mouseX > 120 && mouseX < 480 && menu === 2 && press) {
        if(mouseY > y-25 && mouseY < y+25 && mouseX > 120 && mouseX < 480 && current.every(function(e, i) {return e >= amounts[i]}) &&  skill[0][0] > lvl) {
            skill[0][1] += amounts.reduce(function(a,b) {return a+b}, 0)*2
            for(let i = 0; i < amounts.length; i++) {
                not.push([amounts[i], resources[i], 100, "Drop"])
            }
            for(let i = 0; i < given.length; i++) {
                not.push([gam[i], name, 100, "Pickup"])
            }
            for(let i = 0; i < ind.length; i++) {
                if(ind[i][0] === 0) {res[ind[i][1]] -= amounts[i]}
                else {tools[ind[i][1]] -= amounts[i]}
            }
            for(let i = 0; i < given.length; i++) {
                if(given[i][0] === 0) {res[given[i][1]] += gam[i]} 
                else {tools[given[i][1]] += gam[i]}
            }
        }
    }
    if(menu === 2 && mouseX > 120 && mouseX < 480 && mouseY > y-25 && mouseY < y+25) {
        fill(0)
        rect(180, 35, 240, 60)
        textSize(12)
        fill(skill[0][0] > lvl ? color(255, 255, 255) : color(255, 0, 0))
        textAlign(CENTER)
        text(lvl < skill[0][0] ? des[given[0][1]] : "Crafting skill level not reached " + lvl + " yet!", 190, 45, 230, 600)
        textAlign(LEFT)
    }
    }
}
//} crafting
function crafting() {
    {
    fill(100, 100, 155)
    stroke(50, 50, 50)
    rect(120, 100, 360, 400)
    fill(255, 255, 255)
    textSize(25)
    text("Crafting", 240, 140)
    textSize(13)
    text("Tools", 152, 180)
    textSize(11.5)
    text("Buildings", 227, 180)
    text("Resources", 310, 180)
    textSize(13)
    text("Rafts", 410, 180)
    fill(255, 255, 255)
    noStroke()
    rect(130+wm*85, 190, 85, 5)
    for(let i = 0; i < 4; i++) {
        if(mouseIsPressed && mouseX > 130+i*85 && mouseX < 130+(i+1)*85 && mouseY > 140 && mouseY < 190) {
            wm = i
        }
    }
    }//other
    {
    craft(0, 240, [1], ["Stone"], "Stone Tool", [res[0]], 
    [[0, 0]], [[1, 0]], [1], 0)
    
    craft(0, 290, [2, 1, 2], ["Stone Tool", "Lashing", "Stick"], "Crude Axe", [tools[0], res[2], res[3]],
    [[1, 0], [0, 2], [0, 3]], [[1, 1]], [1], 1)
    
    craft(0, 340, [1, 1, 1], ["Stone Tool", "Lashing", "Stick"], "Refined Knife", [tools[0], res[2], res[3]],
    [[1,0],[0,2],[0,3]], [[1,2]], [1], 1)
    
    craft(0, 390, [2], ["Stick"], "Fishing Spear", [res[3]],
    [[0,3]], [[1,5]], [1], 1)
    
    craft(0, 440, [1, 1], ["Lashing", "Stick"], "Wooden Torch", [res[10], res[3]], [[0, 10], [0, 3]], [[1, 9]], [1], 2)

    }//0
    {
    craft(1, 240, [5], ["Stick"], "Fire", [res[3]], 
    [[0, 3]], [[1, 3]], [1], 1)
    
    craft(1, 290, [1, 4, 2], ["Cloth", "Stick", "Lashing"], "Water Still", [res[10], res[4], res[2]],
    [[0,10],[0,4],[0,2]], [[1, 6]], [1], 2)
    
    craft(1, 340, [5, 4, 3], ["Palm Leaves", "Stick", "Lashing"], "Shelter", [res[3], res[4], res[2]],
    [[0,3],[0,4],[0,2]], [[1,7]], [1], 2)
    
    craft(1, 390, [6, 1], ["Stick", "Lashing"], "Wooden Crate", [res[4], res[2]],
    [[0,4],[0,2]], [[1,8]], [1], 2)
    }//1
    {
    craft(2, 240, [4], ["Fibrous Leaves"], "Lashing", [res[1]],
    [[0,1]], [[0,2]], [1], 0)
    
    craft(2, 290, [2], ["Stick"], "Kindling", [res[3]],
    [[0,3]], [[1,4]], [1], 0)
    }//2
    {
    craft(3, 240, [4], ["Stick"], "Raft Foundation", [res[3]], [[0,3]], [[1, 10]], [1], 2)
    craft(3, 290, [1], ["Raft Foundation"], "Paddle Raft", [tools[10]], [[1, 10]], [[1, 11]], [1], 2)
    }
}
//{
function fishing() {
    if(!on && equipped === "Fishing Spear" && keys.e) {
        fill(255, 255, 255)
        text("Fishing", 15, 580)
        nfish --
        if(nfish < 0) {
            not.push([1, "Sardine", 100, "Pickup"])
            res[9] ++
            nfish = 500+random(0, 1000)
        }
    }
}
//} fishing
//{
function hoverhud() {
    fill(0)
    stroke(150)
    strokeWeight(2)
    if(mouseX > 500 && mouseY < 80) {
        rect(mouseX, mouseY, -150, 75)
        fill(255)
        text("Water: " + round(thirst) +"\nFood: " + round(hunger) + "\nEnergy: " + round(sleep), mouseX-135, mouseY+20)
    }
    if(mouseX > 540 && mouseY > 80 && mouseY < 160) {
        rect(mouseX, mouseY, -160, 75)
        fill(255)
        text("Crafting Lvl " + (skill[0][0]-1) + "\nStrength Lvl " + (skill[1][0]-1) + "\nStamina Lvl " + (skill[2][0]-1), mouseX-145, mouseY+20)
    }
    if(mouseX > 100 && mouseX < 500 && mouseY < 50) {
        rect(mouseX-100, mouseY+10, 200, 80)
        fill(255)
        textSize(14)
        text("Health: " + he + "\nCurrent effects: \nNone", mouseX-90, mouseY+30)  
    }
}
function HUD() {
    fill(255, 255, 255)
    textSize(15)
    text("Press Z to pause game", 210, 15)
    text(abs(round(-py/10)) + (py < 0 ? "S" : "N") +  ", " + abs(round(-px/10*2)) + (px < 0 ? "E" : "W"), 500, 550)
    text(floor(hr) + ":" + (round(59*(hr%1)) < 10 ? "0" : "") + (round(59*(hr%1))), 500, 570)
    stroke(50, 50, 50);
    strokeWeight(2)
    if(ox < 100) {
        fill(200, 200, 200)
        rect(150, 40, 300, 5)
        fill(0, 255, 255)
        rect(150, 40, ox*3, 5)
    }
    fill(200, 200, 200)
    rect(150, 25, 300, 5)
    fill(255, 0, 0)
    rect(150, 25, he*3, 5)
    noFill()
    strokeWeight(5)
    stroke(0, 200, 255)
    arc(550, 40, 60, 60, 270, 270+thirst*3.5)
    stroke(252, 140, 3)
    arc(550, 40, 50, 50, 270, 270+hunger*3.5)
    stroke(143, 42, 176)
    arc(550, 40, 40, 40, 270, 270+sleep*3.5)
    
    textSize(15)
    textAlign(CENTER)
    fill(255, 255, 255)
    if(!onraft) {text("Equipped: " + equipped, 320, 580)}
    textAlign(LEFT)
    text("Day " + day, 60, 20)
    
    hoverhud()

}
function mc(me) {
    if(me === menu) {menu = 0}
    else {menu = me}
}
function pause() {
    let otherdata = others.map(function(e) {
        let n = e.constructor.__name
        return "[" + (n === "Stick" ? 0 : n === "Rock" ? 1 : n === "PSapling" ? 2 : 3) + "," + round(e.x*10)/10 + "," + round(e.y*10)/10
    })
    let treedata = trees.map(function(e) {
        let n = e.constructor.__name
        return "[" + (n === "Palm" ? 0 : n === "Yucca" ? 1 : 2) + "," + round(e.x*10)/10 + "," + round(e.y*10)/10
    })
    let sav = actual + " " + round(px) + " " + round(py) + " " + islandSize + " " + spd + " " + round(hr*1000)/1000 + " " + round(ox) + " " + round(he) + " " + round(thirst) + " " + round(hunger) + " " + otherdata + " " + res + " " + tools + " " + treedata + " " + day
    // seed, position x, position y, island size, speed, time, health, oxygen, thirst, hunger
    if(ps) {
        if(!con2) {
        fill(0, 0, 100)
        rect(150, 100, 300, 400)
        textSize(30)
        fill(255, 255, 255)
        text("Paused", 245, 170)
        textSize(20)
        fill(mouseX > 180 && mouseX < 400 && mouseY > 210 && mouseY < 255 ? color(200, 200, 200) : color(255, 255, 255))
        text("QUIT", 190, 240)
        fill(mouseX > 180 && mouseX < 400 && mouseY > 255 && mouseY < 320 ? color(200, 200, 200) : color(255, 255, 255))
        text("GET SAVE CODE", 190, 290)
        fill(mouseX > 180 && mouseX < 400 && mouseY > 320 && mouseY < 355 ? color(200, 200, 200) : color(255, 255, 255))
        text("CONTROLS", 190, 340)
        if(ps && press) {
            if(mouseX > 180 && mouseX < 400) {
            if(mouseY > 210 && mouseY < 255 && ps) {Program.restart()} 
            else if(mouseY > 255 && mouseY < 320 && ps) {
                println(sav)
                
            } else if(mouseY > 320 && mouseY < 355 && ps) {
                con2 = true
            }
        }}
        }
        if(con2) {
            fill(0, 0, 100)
            rect(150, 100, 300, 400)
            textSize(30)
            fill(255, 255, 255)
            text("CONTROLS", 230, 150)
            textSize(13)
            text(tcontrol, 175, 190)
            fill(0, 0, 200)
            rect(170, 440, 90, 40)
            fill(255, 255, 255)
            text("BACK", 190, 465)
            if(mouseIsPressed && mouseX > 170 && mouseX < 260 && mouseY > 440 && mouseY < 480) {
                con2 = false
            }
        }
    }
}
//} displayed functions
//{
function skills() {
    for(let i = 0; i < 3; i++) {
        noFill()
        stroke(200)
        strokeWeight(1)
        rect(550+i*11, 90, 4, 50) 
        fill(i*80+50)
        rect(550+i*11, 140, 4, -(skill[i][1]/(skill[i][0]*10))*50)
        fill(255)
        textSize(12)
        text(skill[i][0]-1, 550-1+i*11, 155)
        
        if((i === 0 && skill[i][1] >= skill[i][0]*10+(skill[i][0] >= 2 ? 10 : 0)) || (i !== 0 && skill[i][1] >= skill[i][0]*10)) {
            skill[i][0]++
            skill[i][1] = 0
        }
        if(skill[i][0] >= 6) {
            skill[i][1] = 0
        }
    }
    maxweight = 30+(skill[1][0]-1)*5
    spd = 0.5+skill[2][0]*0.05
}
//} skills
//{
function openstorages() {
    let fil = builds.filter(function(e) {return e.constructor === Crate})
    for(let i = 0; i < fil.length; i++) {
        if(dist(fil[i].x, fil[i].y, 150, 150) < 10) {fil[i].open = !fil[i].open}
    }
}
function transfer() {
    let stor = builds.filter(function(e) {return e.open})[0]
    let names = stor.stuff.map(function(e) {return e[0]})
    let names2 = invm.map(function(e) {return e[0]})
    let totalweight2 = stor.stuff.reduce(function(b, e) {return b+e[2]*e[1]}, 0)
    for(let i = 0; i < invm.length; i++) {
        if(mouseY > 150+i*22 && mouseY < 150+20+i*22 && press && mouseX < 300 && totalweight2 < 50) {
            if(invm[i][3][1] === 0) {
                res[invm[i][3][0]] --
            } else {tools[invm[i][3][0]] --}
            if(names.includes(invm[i][0])) {
                stor.stuff[names.indexOf(invm[i][0])][1]++
            } else {stor.stuff.push([invm[i][0], 1, invm[i][2], invm[i][3]])}
            
        } else if(totalweight2 >= 50) {
            not.push([0, 0, 100, "Inventory"])
        }
    }
    for(let i = 0; i < stor.stuff.length; i++) {
        if(mouseY > 150+i*22 && mouseY < 150+20+i*22 && press && mouseX > 300 && totalweight < maxweight) {
            stor.stuff[i][1] --
            if(!names2.includes(stor.stuff[i][0])) {
            invm.push([stor.stuff[i][0], 1, stor.stuff[i][2], stor.stuff[i][3]])
            }
            if(stor.stuff[i][3][1] === 0) {
                res[stor.stuff[i][3][0]] ++
            } else {tools[stor.stuff[i][3][0]] ++}
        }
        
        if(stor.stuff[i][1] <= 0) {stor.stuff.splice(i, 1)}
    }
}
function storage() {
    if(builds.some(function(e) {return e.open && e.constructor === Crate})) {
        let stor = builds.filter(function(e) {return e.open})[0]
        let totalweight2 = round(stor.stuff.reduce(function(b, e) {return b+(e[2]*e[1])}, 0)*10)/10
        transfer()
        
        pushMatrix()
        fill(100, 100, 160)
        rect(30, 50, 250, 500)
        stroke(50)
        rect(320, 50, 250, 500)
        popMatrix()
    {
    pushMatrix()
    translate(-90, 0)
    scale(0.85)
    {
    fill(255, 255, 255)
    textSize(23)
    text("Inventory", 230, 120)
    textSize(21)
    text("Name   #   weight", 170, 155)
    textSize(10)
    text("Per/total", 335, 167)
    textSize(14)
    }
    for(let i = 0; i < 15; i++) {
        noStroke()
        if(mouseX > 30 && mouseX < 300 && mouseY > 150+i*22 && mouseY < 150+20+i*22) {
            fill(120, 120, 180)
            rect(150, 178+i*25, 280, 25)
        }
    }
    fill(255, 255, 255)
    for(let i = 0; i < invm.length; i++) {
        textAlign(CENTER)
        textSize(14)
        text(invm[i][0], 210, invy+19+i*25)
        text(invm[i][1], 280, invy+19+i*25)
        text(invm[i][2] + "/" + round(invm[i][2]*invm[i][1]*10)/10, 360, invy+19+i*25)
    }
    textAlign(LEFT)
    interaction()
    textSize(15)
    text("Total weight: " + round(totalweight*10)/10 + "/" + maxweight, 155, 625)
    text("Page " + (scroll ? 2 : 1) + "/" + (invm.length >= 12 || scroll ? 2 : 1), 350, 623)
    if(keys[ALT] && mouseX < 300) {
        scroll = scroll && keys[UP] ? false : !scroll && keys[DOWN] ? true : scroll 
    }
    popMatrix()
    }
    {
    pushMatrix()
    translate(200, 0)
    scale(0.85)
    {
    fill(255, 255, 255)
    textSize(23)
    text("Storage", 235, 120)
    textSize(21)
    text("Name     #    weight", 165, 155)
    textSize(10)
    text("Per/total", 350, 167)
    textSize(15)
    }
    for(let i = 0; i < 15; i++) {
        noStroke()
        if(mouseX > 300 && mouseY > 150+i*22 && mouseY < 150+20+i*22) {
            fill(120, 120, 180)
            rect(150, 178+i*25, 280, 25)
        }
    }
    fill(255, 255, 255)
    for(let i = 0; i < stor.stuff.length; i++) {
        textAlign(CENTER)
        textSize(13)
        text(stor.stuff[i][0], 195, invy+19+i*25)
        text(stor.stuff[i][1], 300, invy+19+i*25)
        text(stor.stuff[i][2] + "/" +round(stor.stuff[i][2]*stor.stuff[i][1]*10)/10, 375, invy+19+i*25)
    }
    textAlign(LEFT)
    interaction()
    textSize(15)
    text("Total weight: " + totalweight2 + "/" + 50, 160, 625)
    text("Page " + (scroll ? 2 : 1) + "/" + (invm.length >= 12 || scroll ? 2 : 1), 355, 623)
    if(keys[ALT] && mouseX > 300) {
        scroll = scroll && keys[UP] ? false : !scroll && keys[DOWN] ? true : scroll 
    }
    popMatrix()
    }
    }
}
//} storages
//{
function detect() {
    textAlign(LEFT)
    let mb = others.concat(trees).concat(builds).concat(rafts)
    mb = mb.filter(function(e) {return df(e) < 20})
    hig = mb.sort(function(a,b) {return df(a)-df(b)})[0]
}
function desc() {
    textAlign(LEFT)
    if(hig && hig.constructor.__name !== "construct") {
        let inf = ddes.filter(function(e) {return e[0] === hig.constructor.__name})[0]
        fill(255)
        textSize(16)
        text(inf[1], 30, 515, 200, 600)
        textSize(10)
        text(inf[2], 30, 550, 200, 600)
        switch(inf[3]) {
            case 0: 
                fill(200)
                text("Press E to take", 30, 540); break
            case 1: 
                fill(200)
                if(equipped === "Stone Tool" || equipped === "Crude Axe") {
                    text("Hold E to harvest", 30, 540)
                } else {
                    fill(255, 0, 0)
                    text("Stone Tool/Crude Axe required to harvest!", 30, 540)
                }
            break
            case 2: 
                fill(200)
                if(equipped === "Crude Axe") {
                    text("Hold E to harvest", 30, 540)
                } else {
                    fill(255, 0, 0)
                    text("Crude Axe required to harvest!", 30, 540)
                }
            break
            case 3:
                fill(200)
                text("Press E to get on raft", 30, 540)
            break
        }
    }
}
//} closest detection and desc.
//{
function pulse() {
    
    if(sleep < 25) {
        pulsation += 0.7
        noFill()
        stroke(cos(pulsation)*130, cos(pulsation)*130, cos(pulsation)*130)
        strokeWeight(360+(22-sleep)*38)
        arc(300, 300, 1200, 1200, 0, 360)
    }
}
function slept() {
    if(sleep < 0) {
        dead = true
        cause = "Aw man, you didn't notice that pulsating arc surrounding your screen that means you have low energy? Too bad for you."
    }
    if(!sleeping) {sleep -= 0.0013*ts}
    if(slopen) {
        if(!sleeping) {
        fill(130)
        rect(150, 100, 300, 400)
        fill(255, 0, 0)
        rect(400, 110, 40, 40)
        fill(255)
        textSize(40)
        textFont(createFont("arial"))
        text("x", 410, 140)
        textFont(createFont("monospace"))
        
        fill(255)
        textAlign(CENTER)
        textSize(27)
        text("Sleep", 300, 170)
        textSize(21)
        text("hours", 325, 220)
        textSize(17)
        text("Sleep gained: " + round(sleep) + "+" + round(shou*8.8) + "/100", 300, 330)
        text("Food lost: " + round(shou*4) + "/" + round(hunger), 300, 360)
        text("Water lost: " + round(shou*5.8) + "/" + round(thirst), 300, 390)
        
        textSize(13)
        text("If there isn't enough food or water while sleeping, your health will be used up as a replacement.", 155, 430, 300, 600)
        fill(0)
        shou = constrain(shou, 1, 11)
        textSize(20)
        text(shou, 265, 220)
        textAlign(LEFT)
        fill(0)
        pushMatrix()
        translate(265, 195)
        triangle(-10, 4, 10, 4, 0, -4)
        scale(1, -1)
        translate(0, -37)
        triangle(-10, 4, 10, 4, 0, -4)
        popMatrix()
        
        fill(90)
        rect(250, 250, 100, 45)
        fill(255)
        textSize(22)
        textAlign(CENTER)
        fill(169, 227, 118)
        text("sleep", 300, 280)
        textAlign(LEFT)
        
        if(press && mouseX > 240 && mouseX < 350 && mouseY > 250 && mouseY < 295) {
            sleeping = true
            endt = hr+shou > 24 ? hr+shou-24 : hr+shou
            stt = hr
        }
        }
        if(sleeping) {
            sleep += 0.004*ts
            ts = 35
            fill(130)
            textAlign(CENTER)
            textSize(30)
            rect(150, 100, 300, 400)
            fill(255)
            text("Sleeping", 300, 300)
            textAlign(LEFT)
            if((stt < endt && hr >= endt) || (stt > endt && hr < stt && hr >= endt)) {
                sleeping = false
                ts = 0.9
            }
        }
        
        if(press && mouseX > 260 && mouseX < 280) {
            if(mouseY > 180 && mouseY < 210) {shou ++}
            if(mouseY > 220 && mouseY < 250) {shou --}
        }
        if(press && mouseX > 400 && mouseX < 440 && mouseY > 110 && mouseY < 150) {
            slopen = false
        }
    }
}
function health() {
    he += ox <= 0 ? -0.04*ts : 0.003*ts
    he = constrain(he, 0, 100)
    if(thirst <= 0) {
        he -= 0.01*ts
    }
    if(hunger <= 0) {he -= 0.01*ts}
}
function water() {
    on = bs.filter(function(e) {
        return e.x >= 130 && e.x <= 150 && e.y >= 130 && e.y <= 150
    }).length >= 1
    if(!on && !onraft) {
        ox -= 0.06-skill[2][0]*0.005*ts // 0.06
    } else {
        ox += 0.16+skill[2][0]*0.05*ts //0.16
    }
    ox = constrain(ox, 0, 100)
}
function time() {
    hr += 0.00045*ts
    if(hr > 20 || hr < 4) {f = 0}
    if(hr > 4 && hr < 7) {
        f = (hr-4)*1/3
        f += 0.00015*ts
        f = constrain(f, 0, 1)
    }
    if(hr > 7 && hr < 17) {
        f = 1
    }
    if(hr > 17 && hr < 20) {
        f = (20-hr)*1/3
        f -= 0.00015*ts
        f = constrain(f, 0, 1)
    }
    if(hr >= 25) {
        hr = 1
        day++
    }
}
function sustenance() {
    hunger -= 0.002*ts
    thirst -= 0.003*ts
    hunger = constrain(hunger, 0, 100)
    thirst = constrain(thirst, 0, 100)
}
function dying() {
    if(he <= 0) {
        dead = true
        cause = "No health, no life."
    }
    if(dead) {
        dwid *= 0.99
        noFill()
        stroke(0)
        strokeWeight(400)
        arc(300, 300, dwid, dwid, 0, 360)
        if(dwid < 400) {
            background(255, 0, 0)
            textAlign(CENTER)
            textSize(20)
            text("You Died!\n(Obviously)", 300, 130)
            textSize(15)
            text("You've lost all your progress up to the last time\n you copied a save code.\n\nIf you didn't save at all,\n then you've lost your entire world :(\n\nLMB to go back to home screen", 300, 200)
            textAlign(LEFT)
            if(mouseIsPressed) {Program.restart()}
            text(cause, 100, 450, 500, 600)
        }
    }
}
//} survival functions
//{
function controls() {
    let x = keys[RIGHT] ? (on ? spd : spd/3) : keys[LEFT] ? -(on ? spd : spd/3) : 0
    let y = keys[UP] ? -(on ? spd : spd/3) : keys[DOWN] ? (on ? spd : spd/3) : 0
    if(keys[RIGHT] || keys[LEFT] || keys[UP] || keys[DOWN]) {
        skill[2][1] += 0.0015
        if(on) {
            skill[2][1] += 0.001
        } else {skill[1][1] += 0.002}
    }
    let items = bs.concat(trees).concat(others).concat(builds).concat(rafts)
    for(let i = 0; i < items.length; i++) {
        items[i].x -= x
        items[i].y -= y
    }
    px -= x
    py -= y
}
function player() {
    if(keys[RIGHT] && !keys[DOWN] && !keys[UP] && 90) {pd = 90}
    else if (keys[RIGHT] && keys[UP] && !keys[DOWN] && 50) {pd = 45} 
    else if (keys[UP] && !keys[RIGHT] && !keys[LEFT]) {pd = 0}
    else if (keys[UP] && keys[LEFT] && !keys[RIGHT]) {pd = -45}
    else if (keys[LEFT] && !keys[UP] && !keys[RIGHT] && !keys[DOWN]) {pd = -90}
    else if (keys[LEFT] && keys[DOWN] && !keys[UP]) {pd = -135}
    else if (keys[RIGHT] && keys[DOWN] && !keys[UP]) {pd = 135}
    else if (keys[DOWN] && !keys[UP] && !keys[RIGHT] && !keys[LEFT]) {pd = 180}
    pushMatrix()
    translate(150, 150)
    scale(0.22)
    rotate(pd)
    noStroke()
    fill(f*150, f*150, f*150)
    rect(12, 10, 10, -35)
    rect(-20, 10, 10, -35)
    stroke(f*150, f*100, 0)
    strokeWeight(5)
    fill(f*150, f*150, 0)
    rect(-15, -15, 30, 30)
    popMatrix()
}
function afterload() {
    if(saveCode !== "" && !saved) {
    let sp = saveCode.split(" ")
    let arr = bs.concat(others).concat(trees)
    for(let i = 0; i < arr.length; i++) {
        arr[i].x += Number(sp[1])
        arr[i].y += Number(sp[2])
    }
    let data = sp[10].split("[")
    others = []
    for(let i = 0; i < data.length; i++) {
        let entries = data[i].split(",")
        let Thing = entries[0] === "0" ? Rock : entries[0] === "1" ? Stick : entries[0] === "2" ? PSapling : WStill
        others.push(new Thing(Number(entries[1]), Number(entries[2])))
    }
    let tred = sp[13].split("[")
    for(let i = 0; i < tred.length; i++) {
        let entries = tred[i].split(",")
        let Thing = entries[0] === "0" ? Palm : entries[0] === "1" ? Yucca : WStill
        others.push(new Thing(Number(entries[1]), Number(entries[2])))
    }
    }
}
function init() {
    for(let i = 0; i < islands.length; i++) {
        if(islands[i].c.length < islandSize && !islands[i].finish) {
            for(let j = 0; j < loadSpeed; j++) {islands[i].lb()}
        } else if(!islands[i].finish) {
            dup = true
        }
        if(dup) {islands[i].removing = true}
    }    
    if(islands.some(function(e) {return e.finish})) {
        removed = true
    } 
    if(islands.every(function(e) {return e.final})) {
        doing3 = true
    } 
    for(let i = 0; i < islands.length; i++) {
        if(islands[i].pushing) {
            islands[i].push()
        }
    }
    if(loading) {
        let total = islands.reduce(function(a, b) {
            return a+b.ri
        }, 0)
        let total2 = bs.length/islands.reduce(function(a,b) {
            return a+b.c.length
        }, 0)
        let ajk2 = round(100*(islands[0].c.length/islandSize))
        textSize(30)
        ajk2 = constrain(ajk2, 0, 100)
        //background(c1)
        fill(100, 100, 500)
        rect(130, 240, 340, 120)
        fill(255, 255, 255)
        if(ajk2 > 95) {dl = true}
        textSize(25)
        textAlign(CENTER)
        if(!dl) {text("Generating Coordinates\n " + ajk2, 300, 290)}
        else if(!removed) {text("Removing Duplicate \nCoordinates", 300, 290)}
        else if(!doing3) {text("Creating Map " + round(total2*100), 300, 290)}
        else {text("Coloring Map " + round(che/bs.length*100), 300, 290)}
    }
    if(doing3 && loading) {
        for(let i = 0; i < 10; i++) {
            bs[che+i].checkonly()
        }
        che += 10
        if(che >= bs.length-15) {
            check++
            if(saveCode !== "" && saved) {afterload()}
            loading = false
        }
    }
}
function filtered(arr) {
    return arr.filter(function(e) {return df(e) < render})
}
//} main game mechanic functions 
function game() {
    if(!dead) {
    noStroke()
    let cbs = filtered(bs), cothers = filtered(others), cbuilds = filtered(builds), ctrees = filtered(trees)
    render = zoomed ? 10000 : 250
    let x = 720
    c1 = color(0, 0, f*150)
    pushMatrix()    
    if(zoomed) {
    scale(0.35)
    translate(x, x)
    } else {
        scale(2)
    }
    noStroke()
    background(c1)
    for(let i = 0; i < islands.length; i++) {
        if(islands[i].removing) {islands[i].rd()}
    }
    for(let i = 0; i < cbs.length; i++) {cbs[i].draw()}
    for(let i = 0; i < cothers.length; i++) {cothers[i].draw()}
    if(climbed) {for(let i = 0; i < ctrees.length; i++) {ctrees[i].draw()}}
    for(let i = 0; i < cbuilds.length; i++) {cbuilds[i].draw()}
    for(let i = 0; i < rafts.length; i++) {rafts[i].draw()}
    noStroke()
    player()
    popMatrix()
    pushMatrix()
    if(zoomed) {
    scale(0.35)
    translate(x, x)
    } else {
        scale(2)
    }
    noStroke()
    if(!climbed) {for(let i = 0; i < ctrees.length; i++) {ctrees[i].draw()}}
    popMatrix()
    if(!loading && !ps && !zoomed && !climbed && !dead && menu === 0 && !builds.some(function(e) {return e.open}) && !onraft) {controls()}
    if(!loading) {
        pulse()
        skills()
        HUD()
        firemenu()
        watermenu()
        raft()
        if(!onraft) {desc()}
    }
    if(!onraft) {detect()}
    notif()
    if(!builds.some(function(e) {return e.open}) && !loading && !onraft) {switch(menu) {
        case 1: inventory(); break
        case 2: crafting(); break
    }}
    if(!loading) {
    noStroke()
    storage()
    pause()
    include()
    noStroke()
    }
    if(!ps && !loading) {
        water()
        time()
        slept()
        health()
        sapup()
        treedown()
        sustenance()
        fishing()
    }
    }
    noStroke()
    dying()
    init()
}
//{
function back() {
    fill(0, 0, 200)
    rect(30, 540, 90, 40)
    fill(255, 255, 255)
    textSize(20)
    textAlign(LEFT)
    text("BACK", 50, 565)
    
    if(mouseIsPressed) {
        if(mouseX > 30 && mouseX < 120 && mouseY > 540 && mouseY < 580) {
            if(advance) {advance = false}
            sc = "home"
            
        }
    }
}
function preload() {
    let sp = saveCode.split(" ").map(function(e) {return Number(e)})
    let sp2 = saveCode.split(" ")
    if(saveCode === "") {
        actual = ran
    } else {
        actual = sp[0]
        px = sp[1]
        py = sp[2]
        islandSize = sp[3]
        spd = sp[4]
        hr = sp[5]
        he = sp[6]
        ox = sp[7]
        thirst = sp[8]
        hunger = sp[9]
        res = sp2[11].split(",")
        tools = sp2[12].split(",")
    }
    seed = new Random(actual)
}
function nav(x, y, w, h, txt, tx, ty, loc) {
    noStroke()
    fill(0, 0, 200)
    rect(x, y, w, h)
    fill(255)
    text(txt, tx, ty)
    if(mouseX > x && mouseX < x+w && mouseY > y && mouseY < y+h && press) {
        sc = loc
    }
}
//} home screen side functions
//{
function plants() {
    noStroke()    
    fill(255)
    let names = ["Rock", "Stick", "Palm Sapling", "Yucca Tree", "Palm Tree"]
    let data = [
        ["1 Stone", "1 Stick", "1 Fibrous Leaf", "6 Fibrous Leaves", "8 Sticks, 5 Palm Leaves"],
        ["Nothing", "Nothing", "Stone Tool or Crude Axe", "Stone Tool or Crude Axe", "Crude Axe"]
    ]
    for(let i = 0; i < 5; i++) {
        fill(0, 0, 200)
        rect(40, 200+i*50, 120, 40)
        fill(255)
        textAlign(CENTER)
        textSize(15)
        text(names[i], 100, 225+i*50)
        
        if(mouseX > 40 && mouseX < 160 && mouseY > 200+i*50 && mouseY < 240+i*50 && press) {
            lant = i
        }
    }
    fill(255)
    textSize(25)
    text(names[lant], 340, 200)
    textAlign(LEFT)
    fill(255)
    rect(470, 170, 80, 80, 5)
    textSize(15)
    text("Resources gained from looting this item:\n" + data[0][lant] + "\n\nTools required to loot this item:\n" + data[1][lant], 200, 300)
    textSize(13)
    text("Plants/items can be looted/harvested by pressing E \nwhen the player is near it.\n\nPressing C+E near a palm tree will harvest the coconut, \nif it is there.", 150, 490)
    switch(lant) {
    case 0: 
        fill(100)
        rect(500, 200, 18, 18)
    break
    case 1:
        fill(100, 0, 0)
        rect(505, 180, 10, 60)
    break
    case 2:
        fill(0, 150, 0)
        rect(498, 198, 22, 22)
    break
    case 3: 
        pushMatrix()
        translate(502, 202)
        strokeWeight(2)
        scale(3)
        stroke(0, 150, 0)
        fill(0, 100, 50)
        rect(-6, -6, 16, 16, 3)
        fill(0, 200, 100);
        rect(-3, -3, 10, 10, 3)
        popMatrix()
    break
    case 4:
        pushMatrix()
        translate(502, 202)
        scale(3)
        stroke(0, 150, 0)
        strokeWeight(2)
        fill(0, 255, 98)
        rect(-6, -6, 16, 16, 3)
        fill(0, 255, 150)
        rect(-3, -3, 10, 10, 3)
        popMatrix()
    break
    }
}
function tooll() {
    noStroke()    
    fill(255)
    let names = ["Stone Tool", "Refined Knife", "Crude Axe", "Fishing Spear", "Kindling"]
    let data = [
        ["Cuts down palm saplings and yucca trees.", "Skins fresh seafood that's been caught straight from the ocean.", "Cuts down all plants.", "Spears seafood automatically for you when you sit in the ocean and press the key E.", "Lights up fires."],
        ["Press and hold E to cut palm saplings or yucca trees.", "Click on the seafood item that you wish to be skinned (e.g. Sardine => Raw Fish).", "Press and hold E to cut any plant down.", "", "Move your mouse frantically in any direction; the faster you move it the more the bar on your left will go up. Remember, you need to be near a fire!"]
    ]
    for(let i = 0; i < 5; i++) {
        fill(0, 0, 200)
        rect(35, 200+i*50, 130, 40)
        fill(255)
        textAlign(CENTER)
        textSize(15)
        text(names[i], 100, 225+i*50)
        
        if(mouseX > 40 && mouseX < 160 && mouseY > 200+i*50 && mouseY < 240+i*50 && press) {
            lant = i
        }
    }
    fill(255)
    textSize(25)
    text(names[lant], 370, 200)
    textAlign(LEFT)
    textSize(14)
    text(data[0][lant] + "\n\n" + data[1][lant], 200, 240, 390, 600)
}
function survival() {
    
    
    noStroke()    
    fill(255)
    let names = ["Food", "Water", "Oxygen", "Sleep"]
    let data = [
        ["You can get food by fishing using a fishing spear, skinning the fish, and cooking it by putting it onto a fire.",
        "You can get water either way: \n   - collecting water from water stills\n   - drinking drinkable coconuts\n\nCoconuts, when freshly picked, need to be husked before being able to be drank from. \n\nSimply click on the coconut in inventory to husk it.", 
        "Being in water reduces your movement speed and causes you to lose oxygen!!!\nIf you don't have any oxygen left, you'll start to lose health!!!\n\nYou totally didn't know anything of this!!!", 
        "To sleep, you need to be near a shelter, while pressing and holding E until the screen turns completely dark.\n\nNot sleeping will result in a pulsating circle slowly closing in onto the center of the screen.\n\nIf the circle closes in completely, you'll be sent to 7AM with reduced food and water, but 50% sleep."],
    ]
    for(let i = 0; i < 4; i++) {
        fill(0, 0, 200)
        rect(35, 200+i*50, 130, 40)
        fill(255)
        textAlign(CENTER)
        textSize(15)
        text(names[i], 100, 225+i*50)
        
        if(mouseX > 40 && mouseX < 160 && mouseY > 200+i*50 && mouseY < 240+i*50 && press) {
            lant = i
        }
    }
    fill(255)
    textSize(25)
    text(names[lant], 370, 200)
    textAlign(LEFT)
    textSize(14)
    text(data[0][lant], 200, 240, 390, 600)

}
function buildings() {
    noStroke()    
    fill(255)
    let names = ["Fire", "Water Still", "Shelter", "Crate"]
    let data = [
        ["Provides light and a way to cook food.\n\nTo refill the fire by 33%, press R. This requires 1 stick per refill. \n\n Once the fire is placed and you have raw fish in your inventory, press E to place the fish onto the fire. \n\nAfter a while, the food will visibly brown and you can pick it back up by pressing E.",
        "Provides water at the cost of palm leaves.\n\nTo refill the water still by 25%, press R. This requires 1 palm leaf per refill.\n\nThe gray and blue bars represent the fuel (palm leaves) and collected water, respectively.\n\nIf there is fuel in the water still, water will slowly accumulate. To collect the water, hold E.", 
        "Allows you to skip nighttime and regain sleep.\n\nTo sleep, hold E until the black circle completely encloses the player. You'll wake up at 7am with full energy.", 
        "Crates allow you to store extra resources without having to drop them.\n\nClicking items from one side will bring it to another. Each storage has "],
    ]
    for(let i = 0; i < 4; i++) {
        fill(0, 0, 200)
        rect(35, 200+i*50, 130, 40)
        fill(255)
        textAlign(CENTER)
        textSize(15)
        text(names[i], 100, 225+i*50)
        
        if(mouseX > 40 && mouseX < 160 && mouseY > 200+i*50 && mouseY < 240+i*50 && press) {
            lant = i
        }
    }
    textAlign(LEFT)
    textSize(13)
    text("Buildings can be placed by clicking on the item in inventory. It'll be placed on the exact place you're standing on.", 170, 500, 400, 600)
    textAlign(CENTER)
    fill(255)
    textSize(25)
    text(names[lant], 370, 200)
    textSize(14)
    text(data[0][lant], 200, 240, 390, 600)

}
function guide() {
    background(c1)
    textAlign(CENTER)
    textSize(30)
    text("GUIDE", 300, 70)
    textSize(15)
    nav(70, 100, 100, 35, "Plants", 120, 123, "plants")
    nav(190, 100, 100, 35, "Tools", 240, 123, "tools")
    nav(310, 100, 100, 35, "Survival", 360, 123, "survival")
    nav(430, 100, 100, 35, "Buildings", 480, 123, "buildings")
    textAlign(LEFT)
    textSize(20)
    back()
}
//} guide 
//{
function infonew() {
    let p = saveCode.split(" ")
    fill(255)
    textAlign(LEFT)
    textSize(20)
    let dec = round(p[5].split(".")[1]/10)
    text("Saved World \n\n" + (floor(p[5])) + ":" + (round(dec/100*60)) + "\nDay " + (p[14]) + "\nIsland Size " + (p[3]), 80, 200)
    
}
function newgame() {
    background(c1)
    textAlign(CENTER)
    textSize(27)
    text("NEW GAME", 300, 120)
    fill(0, 0, 200)
    rect(180, 520, 180, 50)
    rect(380, 520, 180, 50)
    fill(255)
    textSize(15)
    text("Create New World", 270, 550)
    fill(saveCode === "" ? color(0, 0, 50) : color(255, 255, 255))
    text("Load World", 470, 550)
    if(saveCode !== "") {infonew()}
    if(press && mouseX > 180 && mouseX < 360 && mouseY > 520 && mouseY < 570) {
        sc = "game"
        loading = true
        saved = true
    }
    if(press && saveCode !== "" && mouseX > 380 && mouseX < 560 && mouseY > 520 && mouseY < 570) {
        sc = "game"
        loading = true
        preload()
        saved = false
    } 
    back()
}
//} starting info
//{
function options() {
    textAlign(CENTER)
    background(c1)
    textSize(30)
    text("CONTROLS", 300, 100)
    textSize(20)
    text(tcontrol, 300, 150)
    back()
}
function advanced() {
    background(c1)
    textSize(25)
    text("ADVANCED CONTROLS", 190, 120)
    textSize(20)
    text("G to toggle binoculars.\n\nInventory Controls:\nQ to drop item (while hovered)\nLMB to equip/unequip item", 100, 200)
    back()
}
function load() {
    background(c1)
    textSize(26)
    text("LOAD GAME", 230, 110)
    textSize(14)
    text("Make sure you have your save code entered into the\nsaveCode variable at line 19, then select New Game.", 100, 200)
    textSize(20)
    back()
}
function homeload() {
    
}
function home() {
    homeload()
    background(c1)
    let cond = [
        mouseX > 400 && mouseY > 180 && mouseY < 240,
        mouseX > 400 && mouseY > 240 && mouseY < 280, 
        mouseX > 400 && mouseY > 280 && mouseY < 320, 
        mouseX > 400 && mouseY > 320 && mouseY < 380, 
    ]
    let t = ["START GAME", "BLANK", "GUIDE", "CONTROLS"]
    textFont(createFont("sans-serif"))
    fill(255, 255, 255)
    textSize(30)
    text("STRANDED", 50, 270)
    textSize(60)
    text("KHAN", 50, 320)
    
    textFont(createFont("monospace"))
    textSize(20)
    for(let i = 0; i < t.length; i++) {
        fill(cond[i] ? color(200, 200, 200) : color(255, 255, 255))
        text(t[i], 440, 230+i*40)
    }
    
    if(mouseIsPressed) {
        if(cond[0]) {
            if(!skip) {sc = "newgame";}
            else {
                sc = "game"
                loading = true
            }
        }
        if(cond[1]) {sc = "load"}
        if(cond[2]) {sc = "plants"}
        if(cond[3]) {sc = "options"}
    }
}
//} home screen functions
draw = function() {
    keyPressed = function() {
        keys[keyCode] = true
        keys[key.toString()] = true
        if(menu === 1) {drop()}
        if(keys.e) {pickup()}
        if(keys.e && builds.some(function(e) {return e.constructor === Crate})) {openstorages()}
        if(!builds.some(function(e) {return e.open && e.constructor === Crate}) && !loading) {
            switch(key.toString()) {
            case "z": ps = !ps; break
            case "f": mc(1); break
            case "a": mc(2); break
            case "g": zoomed = !zoomed; break
        }}
    }
    keyReleased = function() {
        keys[keyCode] = false
        keys[key.toString()] = false
    }
    switch(sc) {
        case "home": home(); break
        case "newgame": newgame(); break
        case "game": game(); break
        case "load": load(); break
        case "options": options(); break
        case "plants": guide(); plants(); break
        case "tools": guide(); tooll(); break
        case "survival": guide(); survival(); break
        case "buildings": guide(); buildings(); break
    }
    mousePressed = function() {
        press = true
        canpress = false
    }
    textSize(15)
    fill(255, 255, 255)
    text(round(this.__frameRate), 10, 20)
    if(press && !canpress) {
        press = false
        canpress = true
    }
}




