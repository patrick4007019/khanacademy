/*
This is a 2d island survival game based on the actual game, Stranded Deep.

Also please KA, add ES6; the lack of array destructuring is killing me!!!!

see full version history at 
https://github.com/patrick4007019/khanacademy/commits/main/stranded%20khan
*/

//cheaty jshint stuff to make KA code more es6 â†“
//jshint asi: true 
//jshint esnext: true
//put your save code here:
let saveCode = ""

let tools = [
    0, 0, 0, 0, 0,
    0
] 
let tnames = [
    "Stone Tool", "Crude Axe", "Refined Knife", "Fire", "Kindling", 
    "Fishing Spear"
]
/*
stone tool, crude axe, refined knife, fire
*/
let res = [
    0,0,0,0,0,
    0,0,0,0,0,
    0
] 
/*
stone, fibrous leaves, lashing, sticks, palm leaves, 
coconut, drinkable coconut, kindling, raw fish, cooked fish,
sardine
*/
let islandSize = 200
//{
noStroke()
let ran = round(random(0, 10000))
let sc = "home", keys = [], seed = new Random(ran), bs = [], px = 0, py = 0, pd = 0, loading, islands = [], dup = false, finish = false, check = 0, ps = false, con2 = false, hr = 7, trees = [], on = 0, ox = 100, he = 100, others = [], dl = false, pushing = false, removed = false, check = 0, menu = 0, invm = [], che = 0, doing3 = false, zoomed = false, hunger = 100, thirst = 100, wm = 0, advance = false, equipped = "none", pressed = false, actual = 0, picklog = [], picklog2 = [], climbed = false, builds = [], totalweight = 0, not = [], nfish = 500+random(0, 1000)
let tcontrol = "Arrow Keys to move\nA to open crafting menu\nF to open inventory\nZ to toggle pause menu\nE to interact with an item"
let hm = [
    "00000000330000000",
    "00000333133000000",
    "00033311113300000",
    "00331111213330000",
    "03331112211130000",
    "00311222221130000",
    "0333112222113000",
    "00331122211330",
    "000331122211330",
    "00331112211133000",
    "00033311111133000",
    "00000333113300000",
    "00000003333000000"
]
let c1 = color(0, 0, 150)
let f = 1
//} basic vars
//{

//load speed
let loadSpeed = 2
//player speed 
let spd = 0.5
//render distance
let render = 600
// max weight
let maxweight = 30
//} setting vars

//{
function Stick(x, y) {
    this.x = x
    this.y = y
    this.draw = function() {
        noStroke()
        fill(f*150, 0, 0)
        rect(this.x+9, this.y+4, 3, 12)
    }
}
function Palm(x, y) {
    this.x = x
    this.y = y
    this.he = 1
    this.rand = seed.nextGaussian()
    this.coco = true
    this.isclimbed = false
    this.draw = function() {
        pushMatrix()
        translate(this.x+8, this.y+8)
        scale(this.he)
        stroke(0, f*150, 0)
        strokeWeight(2)
        fill(0, f*255, f*98)
        rect(-6, -6, 16, 16, 3)
        fill(0, f*255, f*150)
        rect(-3, -3, 10, 10, 3)
        fill(255, 255, 255)
        if(!keys.c) {climbed = false; this.isclimbed = false}
        popMatrix()
        if(this.he >= 0.7 && this.rand < -0.3 && this.coco) {
            noStroke()
            pushMatrix()
            translate(this.x+8, this.y+8)
            scale(this.he)
            fill(f*100, 0, 0)
            ellipse(3, 3, 4, 4)
            popMatrix()
            if(this.x > 125 && this.x < 155 && this.y > 125 && this.y < 155) {
                fill(255, 255, 255)
                textSize(7)
                text("Hold C to climb tree", 25, 260)
                climbed = keys.c
                if(keys.c) {
                    this.isclimbed = true
                }
            }
            if(this.isclimbed) { text("E to pick coconut", 25, 270)}
            if(climbed && this.isclimbed && keys.e && this.coco) {
                not.push([1, "Coconut", 100, "Pickup"])
                this.coco = false
                res[5]++
            }
        }
    }
}
function Yucca(x, y) {
    this.x = x
    this.y = y
    this.he = 1
    this.draw = function() {
        pushMatrix()
        translate(this.x+8, this.y+8)
        scale(this.he)
        stroke(0, f*150, 0)
        strokeWeight(2)
        fill(0, f*100, f*50)
        rect(-6, -6, 16, 16, 3)
        fill(0, f*200, f*100);
        rect(-3, -3, 10, 10, 3)
        popMatrix()
    }
}
function Rock(x, y) {
    this.x = x
    this.y = y
    this.draw = function() {
        fill(f*100, f*100, f*100)
        stroke(f*50, f*50, f*50)
        strokeWeight(1)
        rect(this.x+8, this.y+8, 4, 4)
    }
}
function PSapling(x, y) {
    this.x = x
    this.y = y
    this.he = 1
    this.draw = function() {
        fill(f*100, f*255, f*100)
        stroke(f*50, f*50, f*50)
        strokeWeight(1)
        rect(this.x+8, this.y+8, 5*this.he, 5*this.he)
    }
}
//} plant/resource constructors
//{
function Fire(x, y) {
    this.x = x
    this.y = y
    this.heat = 0
    this.fuel = 1
    this.started = false
    this.meaton = false
    this.mtimer = 500
    this.ref = function() {
        if(keys.r && this.started) {
            
        if(res[3] >= 1 && this.started) {
            this.fuel += 0.33
            res[3] --
        }
        
        }
    }
    this.start = function() {
        let fclose = this.x > 135 && this.x < 165 && this.y > 135 && this.y < 165
        if(this.started) {
            fill(255, 100, 0)
            ellipse(0.25, 0, 8, 8)
            noFill()
            strokeWeight(2)
            stroke(100, 100, 100)
            arc(0.25, 0, 8, 8, -130, this.fuel*360-150)
            this.fuel = constrain(this.fuel, 0, 1)
            this.fuel -= 0.0001 //0.00003
            if(this.fuel < 0) {
                this.started = false
                this.fuel = 100
            }
            if(keys.e && !this.meaton && res[8] >= 1) {
                res[8] --
                this.meaton = true
                this.mtimer = 1000
            }
            if(this.meaton) {
                rotate(-45)
                fill(this.ready ? 50 : 170, 0, 0)
                rect(-2, -2, 3, 3)
                this.mtimer --
                if(this.mtimer < 0) {
                    this.ready = true
                }
                
                if(this.ready && fclose && keys.e) {
                    this.ready = false
                    this.meaton = false
                    res[9]++
                }
            }
        }
    }
    this.draw = function() {
        let fclose = this.x > 135 && this.x < 165 && this.y > 135 && this.y < 165
        pushMatrix()
        translate(this.x, this.y)
        fill(150, 0, 0)
        rotate(45)
        noStroke();
        scale(1.4)
        rect(-1, -5, 2, 10)
        rect(-5, -1, 10, 2)
        scale(0.9)
        this.start()
        popMatrix()
        pushMatrix()
        translate(0, -250)
        if(!this.started) {
            fill(255, 100, 0)
            rect(20, 500, 3, -this.heat*2.2)
        }
        popMatrix()
        if(fclose && equipped === "Kindling") {
            let mov = [abs(mouseX-pmouseX), abs(mouseY-pmouseY)]
            this.heat += mov[0]/100+mov[1]/100
            this.heat -= 0.3
            this.heat = constrain(this.heat, 0, 100)
            if(this.heat >= 100) {
                this.started = true
                tools[4] --
            }
        }
        if(!fclose) {this.heat = 0}
    }
}
function refuel() {
    let fires = builds.filter(function(e) {
        return e instanceof Fire
    })
    for(let i = 0; i < fires.length; i++) {
        fires[i].ref()
    }
}
//} building constructors
//{
function notif() {
    textAlign(RIGHT)
    for(let i = 0; i < not.length; i++) {
    if(not[i]) {
        not[i][2] -= 0.25
        if(not[i][2] < 20) {not.splice(i, 1)}
        if(not[i] && not[i][3] === "Pickup") {
            fill(not[i][2]*1.5, not[i][2]*1.5, 155+not[i][2])
            text("+" + not[i][0] + " " + not[i][1], 580, 100+i*20)
        } else if(not[i] && not[i][3] === "Heavy") {
            not[i][2] -= 0.1
            fill(not[i][2]*2.5, not[i][2]*1.5, 155+not[i][2])
            text("You're carrying too much!", 580, 100+i*20)
        }
    }
    }
    if(not.length > 20) {not.shift()}
    textAlign(LEFT)
}
//} notifications 
//{
function Land(x, y) {
    {
    this.x = x
    this.y = y
    this.checked = 0
    this.rand = seed.nextGaussian()
    this.lit = false
    }
    this.check = function() {
        if(check === 0) {
        this.count = 0
        for(let i = 0; i < bs.length; i++) {
            if(
            (bs[i].x === this.x-20 && bs[i].y === this.y) ||
            (bs[i].x === this.x+20 && bs[i].y === this.y) ||
            (bs[i].x === this.x && bs[i].y === this.y-20) || 
            (bs[i].x === this.x && bs[i].y === this.y+20) ||
            (bs[i].x === this.x-20 && bs[i].y === this.y-20) ||
            (bs[i].x === this.x-20 && bs[i].y === this.y+20) ||
            (bs[i].x === this.x+20 && bs[i].y === this.y-20) ||
            (bs[i].x === this.x+20 && bs[i].y === this.y+20)
            ) {
                this.count++
            }
        }
        if(this.count > 9) {
            if(this.rand < -1) {trees.push(new Palm(this.x, this.y))}
            if(this.rand > 0.25 && this.rand < 0.4) {trees.push(new Yucca(this.x, this.y))}
        }
        if(this.rand > -1 && this.rand < -0.5) {
            others.push(new Rock(this.x, this.y))
        }
        if(this.rand > -0.1 && this.rand < 0.24) {others.push(new Stick(this.x, this.y))}
        }
        if(this.rand > -0.5 && this.rand < -0.1) {others.push(new PSapling(this.x, this.y))}
    }
    this.draw = function() {
        let ff
        if(hr > 18 || hr < 6) {
        let fires = builds.filter(function(e) {return e instanceof Fire})
        let that = this
        let closefires = fires.filter(function(e) {return dist(e.x, e.y, that.x+10, that.y+10) < 35})
        let farfires = fires.filter(function(e) {return dist(e.x, e.y, that.x+10, that.y+10) < 55})
        ff = closefires.length >= 1 && closefires.some(function(e) {return e.started}) ? 0.8 : farfires.length >= 1 && farfires.some(function(e) {return e.started}) ? 0.2 : f
        } else {
            ff = f
        }
        this.col = color(0, ff*(230-(this.count-8)*7), 0);
        if(this.count <= 9) {this.col = color(ff*255, ff*255, ff*150)}
        stroke(this.col)
        strokeWeight(1)
        fill(this.col)
        rect(this.x, this.y, 20, 20)
    }
    this.check()
}
function Island(x, y) {
    {
    this.x = x
    this.y = y
    this.n = seed.nextGaussian()
    this.ch = 0
    this.unique = []
    this.ri = 0
    this.sb = 0
    this.c = [new PVector(x, y)]
    this.dir = (this.n < -1 && new PVector(0, -20)) || (this.n > -1 && this.n < 0 && new PVector(20, 0)) || (this.n > 0 && this.n < 1 && new PVector(0, 20)) || (this.n > 1 && new PVector(-20, 0))
    this.finish = false
    this.final = false
    }
    this.lb = function() {
        this.n = seed.nextGaussian()
        this.dir = (this.n < -1 && new PVector(0, -20)) || (this.n > -1 && this.n < 0 && new PVector(20, 0)) || (this.n > 0 && this.n < 1 && new PVector(0, 20)) || (this.n > 1 && new PVector(-20, 0))
        if(this.c[this.ch]) {this.c.push(new PVector(this.c[this.ch].x+this.dir.x, this.c[this.ch].y+this.dir.y))}
        this.ch = abs(round(this.c.length*seed.nextGaussian()))
        this.ch = constrain(this.ch, 0, this.c.length-1)
    }
    this.rd = function() {if(this.removing) {
        for(let i = 0; i < 1; i++) {
        for(let j = 0; j < this.c.length; j++) {
            if(this.c[this.ri] && this.c[j] && this.c[this.ri].x === this.c[j].x && this.c[this.ri].y === this.c[j].y && this.ri !== j) {
                this.c.splice(j, 1) 
            }
        }
            this.ri++
        }
        if(this.ri >= this.c.length-2) {
            this.pushing = true
            for(let i = 0; i < this.c.length; i++) {
                //bs.push(new Land(this.c[i].x, this.c[i].y))
            }

            dup = false
            this.finish = true
            this.removing = false
        }
        
    }}
    this.push = function() {
        if(this.c[this.sb]) {bs.push(new Land(this.c[this.sb].x, this.c[this.sb].y))}
        this.sb++
        
        if(this.sb >= this.c.length-1) {
            this.pushing = false
            this.final = true
        }
    }
}
for(let i = 1; i < 4; i++) {for(let j = 1; j < 4; j++) {
    islands.push(new Island(i*700-1300, j*700-1300))
}}
//} land constructors
//{
function df(e) {
    return round(dist(e.x, e.y, 140, 140))
} 
function pickup() {
    let uppable = others.filter(function(e) {return e.constructor === Rock || e.constructor === Stick})
    uppable.sort(function(a,b) {return df(a)-df(b)})
    if(uppable.some(function(e) {return df(e) < 15}) && keyIsPressed && key.toString() === "e") {
        if(totalweight < maxweight) {
            picklog.push(others.indexOf(uppable[0]))
            not.push([1, uppable[0].constructor.__name, 100, "Pickup"])
            others.splice(others.indexOf(uppable[0]), 1)
            switch(uppable[0].constructor) {
                case Rock: res[0]++; break
                case Stick: res[3]++; break
            }
        } else {
            not.push([0, 0, 100, "Heavy"])
        }
    }
}
function sapup() {
    let saplings = others.filter(function(e) {return e instanceof PSapling})
    saplings.sort(function(a,b) {return df(a)-df(b)})
    if(saplings.some(function(e) {return df(e) < 15}) && (equipped === "Stone Tool" || equipped === "Crude Axe") && totalweight <= maxweight) {
        if(keys.e) {
            saplings[0].he -= 0.01
            if(saplings[0].he <= 0) {
                picklog.push(others.indexOf(saplings[0]))
                not.push([1, "Fibrous Leaves", 100, "Pickup"])
                others.splice(others.indexOf(saplings[0]), 1)
                res[1]++
            }
        }
    }
}
function treedown() {
    let cutting = trees.map(function(e) {return e})
    cutting.sort(function(a, b) {return df(a)-df(b)})
    if(cutting.some(function(e) {return df(e) < 18}) && equipped === "Crude Axe" && cutting[0] instanceof Palm && totalweight <= maxweight) {
        if(keys.e) {
            cutting[0].he -= 0.002
            if(cutting[0].he <= 0.3) {
                picklog2.push(trees.indexOf(cutting[0]), 1)
                not.push([8, "Stick", 100, "Pickup"], [5, "Palm Leaves", 100, "Pickup"])
                trees.splice(trees.indexOf(cutting[0]), 1)
                res[3] += 8
                res[4] += 5
            }
        }
    }
    if(cutting.some(function(e) {return df(e) < 18}) && (equipped === "Crude Axe" || equipped === "Stone Tool") && cutting[0].constructor === Yucca && totalweight <= maxweight) {
        text("Hold E to cut", 50, 560)
        if(keys.e) {
            cutting[0].he -= equipped === "Stone Tool" ? 0.0015 : 0.0035
            if(cutting[0].he <= 0.3) {
                picklog2.push(trees.indexOf(cutting[0]), 1)
                not.push([6, "Fibrous Leaves", 100, "Pickup"])
                trees.splice(trees.indexOf(cutting[0]), 1)
                res[1] += 6
            }
        }
    }
}
//} picking up resources
//{
function include() {
    let invs = [
        ["Stone", round(res[0]/2), 1, [0, 0]],
        ["Fibrous Leaves", res[1], 0.1, [1, 0]],
        ["Lashing", res[2], 0.4, [2, 0]],
        ["Stick", round(res[3]), 1, [3, 0]],
        ["Palm Leaves", res[4], 0.5, [4, 0]],
        ["Coconut", res[5], 2, [5, 0]],
        ["Drinkable Coconut", res[6], 1, [6, 0]],
        ["",0,0,[0,0]],
        ["Raw Meat", res[8], 0.5, [8, 0]],
        ["Cooked Meat", res[9], 0.5, [9, 0]],
        ["Sardine", res[10], 0.5, [10, 0]] 
    ]
    let toolsm = [
        ["Stone Tool", tools[0], 1, [0, 1]],
        ["Crude Axe", tools[1], 4.4, [1, 1]],
        ["Refined Knife", tools[2], 2.4, [2, 1]],
        ["Fire", tools[3], 4, [3, 1]],
        ["Kindling", tools[4], 2, [4, 1]],
        ["Fishing Spear", tools[5], 1, [5, 1]]
    ]
    invm = []
    for(let i = 0; i < invs.length; i++) {if(res[i] > 0) {invm.push(invs[i])}}
    for(let i = 0; i < toolsm.length; i++) {if(tools[i] > 0) {invm.push(toolsm[i])}}
}
function drop() {
    let yx = invm.map(function(e, i) {return [e[0], e[3]]})
    for(let i = 0; i < yx.length; i++) {
        if(mouseX > 139 && mouseX < 470 && mouseY > 197+i*25 && mouseY < 222+i*25 && keys.q) {
            if(yx[i][1][1] === 0) {res[yx[i][1][0]] --}
            if(yx[i][1][1] === 1) {tools[yx[i][1][0]] --}
        }
    }
}
function interaction() {
    let yx = invm.map(function(e) {return e[0]})
    let yy = tnames.map(function(e) {return [yx.indexOf(e), e]})
    if(mouseIsPressed) {
        for(let i = 0; i < yy.length; i++) {
            if(mouseX > 139 && mouseX < 470 && mouseY > 197+yy[i][0]*25 && mouseY < 222+yy[i][0]*25) {
                equipped = yy[i][1]
            }
            if(yy[i][1] < 1 && equipped === yy[i][1]) {
                equipped = ""
            }
        }
    }
    let cocon = yx.indexOf("Coconut"), drinka = yx.indexOf("Drinkable Coconut"), firea = yx.indexOf("Fire"), sard = yx.indexOf("Sardine"), cmeat = yx.indexOf("Cooked Meat")
    mousePressed = function() {
        if(mouseX > 139 && mouseX < 470) {
        if(mouseY > 197+cocon*25 && mouseY < 222+cocon*25) {
            res[6] ++
            res[5] --
        }
        if(mouseY > 197+drinka*25 && mouseY < 222+drinka*25) {
            thirst += 20
            res[6] --
        }
        if(mouseY > 197+firea*25 && mouseY < 222+firea*25 && on) {
            builds.push(new Fire(150, 150))
            tools[3] --
        }
        if(mouseY > 197+sard*25 && mouseY < 222+sard*25 && equipped === "Refined Knife") {
            res[10] --
            res[8] ++
        }
        if(mouseY > 197+cmeat*25 && mouseY < 222+cmeat*25) {
            res[9] --
            hunger += 30
        }
        }
    }
}
function inventory() {
    fill(100, 100, 155)
    rect(120, 90, 360, 420)
    fill(255, 255, 255)
    textSize(25)
    text("Inventory", 225, 130)
    textSize(21)
    text("Name      #     weight", 170, 175)
    textSize(10)
    text("Per/total", 375, 187)
    textSize(14)
    for(let i = 0; i < 10; i++) {
        noStroke()
        if(mouseX > 130 && mouseX < 470 && mouseY > 196+i*25 && mouseY < 221+i*25) {
            fill(120, 120, 180)
            rect(130, 198+i*25, 340, 25)
        }
    }
    fill(255, 255, 255)
    for(let i = 0; i < invm.length; i++) {
        textAlign(CENTER)
        textSize(13)
        text(invm[i][0], 195, 215+i*25)
        text(invm[i][1], 300, 215+i*25)
        text(invm[i][2] + "/" + invm[i][2]*round(invm[i][1]*10)/10, 395, 215+i*25)
    }
    textAlign(LEFT)
    interaction()
    text("Total weight: " + round(totalweight*10)/10 + "/" + maxweight, 140, 490)
}
//} inventory
//{
function craft(y, amounts, resources, name, current) {
    fill(120, 120, 175);
    if(mouseX > 120 && mouseX < 480 && mouseY > y-25 && mouseY < y+25) {rect(125, y-28, 350, 50)}
    fill(current.every(function(e, i) {return e >= amounts[i]}) ? color(255, 255, 255) : color(150, 150, 200))
    textSize(15)
    text(name, 150, y)
    textSize(13)
    for(let i = 0; i < amounts.length; i++) {
        text(amounts[i] + " " +  resources[i], 330, (y+i*14)-(amounts.length-1)*7+2)
    }
}
function exec(m) {
    mousePressed = function() {if(mouseX > 120 && mouseX < 480 && menu === 2) {
    if(m === 0) {
        if(mouseY > 240-25 && mouseY < 240+35 && res[0] >= 1) {
            tools[0]++
            res[0] -= 2
        }
        if(mouseY > 290-25 && mouseY < 290+35 && tools[0] >= 2 && res[2] >= 1 && res[3] >= 2) {
            tools[0] -= 2
            res[2] --
            res[3] -= 2
            tools[1] ++
        }
        if(mouseY > 340-25 && mouseY < 340+35 && tools[0] >= 1 && res[2] >= 1 && res[3] >= 1) {
            tools[0] --
            res[2] --
            res[3] --
            tools[2] ++
        }
        if(mouseY > 390-25 && mouseY < 390+35 && res[3] >= 2) {
            res[3] -= 2
            tools[5] ++
        }
    }
    if(m === 1) {
        if(mouseY > 240-25 && mouseY < 240+35 && res[3] >= 4) {
            tools[3]++
            res[3] -= 4
        }
    }
    if(m === 2) {
        if(mouseY > 240-25 && mouseY < 240+35 && res[1] >= 4) {
            res[2]++
            res[1] -= 4
        }
        if(mouseY > 290-25 && mouseY < 290+35 && res[3] >= 2) {
            res[3] -= 2
            tools[4] ++
        }
    }
    }}
}
function crafting() {
    fill(100, 100, 155)
    rect(120, 100, 360, 400)
    fill(255, 255, 255)
    textSize(25)
    text("Crafting", 240, 140)
    textSize(15)
    text("Tools     Buildings    Resources", 170, 180)
    fill(255, 255, 255)
    noStroke()
    rect(140+wm*110, 190, 105, 5)
    for(let i = 0; i < 3; i++) {
        if(mouseIsPressed && mouseX > 140+i*110 && mouseX < 140+(i+1)*110 && mouseY > 140 && mouseY < 190) {
            wm = i
        }
    }
    exec(wm)
    switch(wm) {
    case 0: 
        craft(240, [1], ["Stone"], "Stone Tool", [res[0]])
        craft(290, [2, 1, 2], ["Stone Tool", "Lashing", "Stick"], "Crude Axe", [tools[0], res[2], res[3]])
        craft(340, [1, 1, 1], ["Stone Tool", "Lashing", "Stick"], "Refined Knife", [tools[0], res[2], res[3]])
        craft(390, [2], ["Stick"], "Fishing Spear", [res[3]])
    break
    case 1: 
        craft(240, [5], ["Stick"], "Fire", [res[3]])
    break
    case 2:
        craft(240, [4], ["Fibrous Leaves"], "Lashing", [res[1]])
        craft(290, [2], ["Stick"], "Kindling", [res[3]])
    break
    }
}
//} crafting
//{
function fishing() {
    if(!on && equipped === "Fishing Spear" && keys.e) {
        nfish --
        if(nfish < 0) {
            not.push([1, "Sardine", 100, "Pickup"])
            res[10] ++
            nfish = 500+random(0, 1000)
        }
    }
}
//} fishing
//{
function HUD() {
    fill(255, 255, 255)
    textSize(15)
    text("Press Z to pause game", 210, 15)
    text(abs(round(-py/10*2)) + (py < 0 ? "S" : "N") +  ", " + abs(round(-px/10)) + (px < 0 ? "E" : "W"), 500, 550)
    text(floor(hr) + ":" + (round(60*(hr%1)) < 10 ? "0" : "") + (round(60*(hr%1))), 500, 570)
    stroke(50, 50, 50);
    strokeWeight(2)
    if(ox < 100) {
        fill(200, 200, 200)
        rect(150, 40, 300, 5)
        fill(0, 255, 255)
        rect(150, 40, ox*3, 5)
    }
    fill(200, 200, 200)
    rect(150, 25, 300, 5)
    fill(255, 0, 0)
    rect(150, 25, he*3, 5)
    noFill()
    strokeWeight(5)
    stroke(0, 200, 255)
    arc(550, 40, 60, 60, 270, 270+thirst*3.5)
    stroke(252, 140, 3)
    arc(550, 40, 50, 50, 270, 270+hunger*3.5)
    
    textSize(15)
    fill(255, 255, 255)
    text("Equipped: " + equipped, 220, 580)

}
function mc(me) {
    if(me === menu) {menu = 0}
    else {menu = me}
}     
function pause() {
    let sav = actual + " " + round(px) + " " + round(py) + " " + islandSize + " " + spd + " " + round(hr*1000)/1000 + " " + round(ox) + " " + round(he) + " " + round(thirst) + " " + round(hunger) + " " + picklog + " " + res + " " + tools
    // seed, position x, position y, island size, speed, time, health, oxygen, thirst, hunger
    if(ps) {
        if(!con2) {
        fill(0, 0, 100)
        rect(150, 100, 300, 400)
        textSize(30)
        fill(255, 255, 255)
        text("Paused", 245, 170)
        textSize(20)
        fill(mouseX > 180 && mouseX < 400 && mouseY > 210 && mouseY < 255 ? color(200, 200, 200) : color(255, 255, 255))
        text("QUIT", 190, 240)
        fill(mouseX > 180 && mouseX < 400 && mouseY > 255 && mouseY < 320 ? color(200, 200, 200) : color(255, 255, 255))
        text("GET SAVE CODE", 190, 290)
        fill(mouseX > 180 && mouseX < 400 && mouseY > 320 && mouseY < 355 ? color(200, 200, 200) : color(255, 255, 255))
        text("CONTROLS", 190, 340)
        mousePressed = function() {if(ps) {
            if(mouseX > 180 && mouseX < 400) {
            if(mouseY > 210 && mouseY < 255 && ps) {Program.restart()} 
            else if(mouseY > 255 && mouseY < 320 && ps) {
                println(sav)
                
            } else if(mouseY > 320 && mouseY < 355 && ps) {
                con2 = true
            }
        }}}
        }
        if(con2) {
            fill(0, 0, 100)
            rect(150, 100, 300, 400)
            textSize(30)
            fill(255, 255, 255)
            text("CONTROLS", 230, 150)
            textSize(15)
            text(tcontrol, 180, 250)
            fill(0, 0, 200)
            rect(170, 440, 90, 40)
            fill(255, 255, 255)
            text("BACK", 190, 465)
            if(mouseIsPressed && mouseX > 170 && mouseX < 260 && mouseY > 440 && mouseY < 480) {
                con2 = false
            }
        }
    }
}
//} displayed functions
//{
function health() {
    he += ox <= 0 ? -0.05 : 0.01
    he = constrain(he, 0, 100)
    if(thirst <= 0) {he -= 0.01}
    if(hunger <= 0) {he -= 0.01}
}
function water() {
    on = bs.filter(function(e) {
        return e.x >= 130 && e.x <= 150 && e.y >= 130 && e.y <= 150
    }).length >= 1
    if(!on) {
        ox -= 0.06
    } else {
        ox += 0.16
    }
    ox = constrain(ox, 0, 100)
}
function time() {
    hr += 0.0005
    if(hr > 19 || hr < 5) {f = 0.04}
    if(hr > 5 && hr < 8) {
        f += 0.00024
        f = constrain(f, 0, 1)
    }
    if(hr > 8 && hr < 17) {
        f = 1
    }
    if(hr > 17 && hr < 20) {
        f -= 0.00024
        f = constrain(f, 0, 1)
    }
    if(hr >= 25) {
        hr = 1
    }
}
function sustenance() {
    hunger -= 0.002
    thirst -= 0.003
    hunger = constrain(hunger, 0, 100)
    thirst = constrain(thirst, 0, 100)
}
//} other game mechanic functions
//{
function controls() {
    let x = keys[RIGHT] ? (on ? spd : spd/3) : keys[LEFT] ? -(on ? spd : spd/3) : 0
    let y = keys[UP] ? -(on ? spd : spd/3) : keys[DOWN] ? (on ? spd : spd/3) : 0
    let items = bs.concat(trees).concat(others).concat(builds)
    for(let i = 0; i < items.length; i++) {
        items[i].x -= x
        items[i].y -= y
    }
    px -= x
    py -= y
}
function player() {
    if(keys[RIGHT] && !keys[DOWN] && !keys[UP] && 90) {pd = 90}
    else if (keys[RIGHT] && keys[UP] && !keys[DOWN] && 50) {pd = 45} 
    else if (keys[UP] && !keys[RIGHT] && !keys[LEFT]) {pd = 0}
    else if (keys[UP] && keys[LEFT] && !keys[RIGHT]) {pd = -45}
    else if (keys[LEFT] && !keys[UP] && !keys[RIGHT] && !keys[DOWN]) {pd = -90}
    else if (keys[LEFT] && keys[DOWN] && !keys[UP]) {pd = -135}
    else if (keys[RIGHT] && keys[DOWN] && !keys[UP]) {pd = 135}
    else if (keys[DOWN] && !keys[UP] && !keys[RIGHT] && !keys[LEFT]) {pd = 180}
    pushMatrix()
    translate(150, 150)
    scale(0.22)
    rotate(pd)
    noStroke()
    fill(f*150, f*150, f*150)
    rect(12, 10, 10, -35)
    rect(-20, 10, 10, -35)
    stroke(f*150, f*100, 0)
    strokeWeight(5)
    fill(f*150, f*150, 0)
    rect(-15, -15, 30, 30)
    popMatrix()
}
function stickdup() {
    let sticks = others.concat(trees)
    for(let i = 0; i < sticks.length; i++) {
        for(let j = 0; j < sticks.length; j++) {if(i !== j) {
            if(sticks[i].x === sticks[j].x && sticks[i].y === sticks[j].y) {
                sticks.splice(sticks.indexOf(sticks[j]), 1)
                others.splice(others.indexOf(sticks[j]), 1)
            }
        }}
    }
}
function afterload() {
    let sp = saveCode.split(" ")
    let arr = bs.concat(others).concat(trees)
    for(let i = 0; i < arr.length; i++) {
        arr[i].x += Number(sp[1])
        arr[i].y += Number(sp[2])
    }
    let gol = sp[10].split(",")
    for(let i = 0; i < gol.length; i++) {
        others.splice(Number(gol[i]), 1)
    }
    picklog = gol
}
function init() {
    for(let i = 0; i < islands.length; i++) {
        if(islands[i].c.length < islandSize && !islands[i].finish) {
            for(let j = 0; j < loadSpeed; j++) {islands[i].lb()}
        } else if(!islands[i].finish) {
            dup = true
        }
        if(dup) {islands[i].removing = true}
    }    
    if(islands.some(function(e) {return e.finish})) {
        removed = true
    } 
    if(islands.every(function(e) {return e.final})) {
        doing3 = true
    } 
    for(let i = 0; i < islands.length; i++) {
        if(islands[i].pushing) {
            islands[i].push()
        }
    }
    if(loading) {
        let total = islands.reduce(function(a, b) {
            return a+b.ri
        }, 0)
        let total2 = bs.length/islands.reduce(function(a,b) {
            return a+b.c.length
        }, 0)
        let ajk2 = round(100*(islands[0].c.length/islandSize))
        textSize(30)
        ajk2 = constrain(ajk2, 0, 100)
        background(c1)
        fill(255, 255, 255)
        if(ajk2 > 95) {dl = true}
        if(!dl) {text("Loading Map " + ajk2, 180, 290)}
        else if(!removed) {text("Removing Duplicates", 140, 290)}
        else if(!doing3) {text("Creating Map " + round(total2*100), 160, 290)}
        else {text("Coloring Map " + round(che/bs.length*100), 160, 290)}
    }
    if(doing3 && loading) {
        for(let i = 0; i < 10; i++) {
            bs[che+i].check()
        }
        che += 10
        if(che >= bs.length-15) {
            check++
            if(saveCode !== "") {afterload()}
            stickdup()
            loading = false
        }
    }
}
function filtered(arr) {
    return arr.filter(function(e) {return df(e) < render})
}
//} main game mechanic functions 
function game() {
    let cbs = filtered(bs), cothers = filtered(others), cbuilds = filtered(builds), ctrees = filtered(trees)
    render = zoomed ? 10000 : 250
    let x = 720
    c1 = color(0, 0, f*150)
    pushMatrix()    
    if(zoomed) {
    scale(0.35)
    translate(x, x)
    } else {
        scale(2)
    }
    background(c1)
    for(let i = 0; i < islands.length; i++) {
        if(islands[i].removing) {islands[i].rd()}
    }
    for(let i = 0; i < cbs.length; i++) {cbs[i].draw()}
    for(let i = 0; i < cothers.length; i++) {cothers[i].draw()}
    for(let i = 0; i < cbuilds.length; i++) {cbuilds[i].draw()}
    if(climbed) {for(let i = 0; i < ctrees.length; i++) {ctrees[i].draw()}}
    player()
    popMatrix()
    pushMatrix()
    if(zoomed) {
    scale(0.35)
    translate(x, x)
    } else {
        scale(2)
    }    
    if(!climbed) {for(let i = 0; i < ctrees.length; i++) {ctrees[i].draw()}}
    popMatrix()
    if(!loading && !ps && !zoomed && !climbed) {controls()}
    HUD()
    notif()
    switch(menu) {
        case 1: inventory(); break
        case 2: crafting(); break
    }
    totalweight = invm.reduce(function(a,b,i) {return a+(b[2]*b[1])}, 0)
    pause()
    include()
    if(!ps) {
        water()
        time()
        health()
        pickup()
        sapup()
        treedown()
        sustenance()
        fishing()
    }
    init()
}
//{
function back() {
    fill(0, 0, 200)
    rect(30, 540, 90, 40)
    fill(255, 255, 255)
    text("BACK", 50, 565)
    
    if(mouseIsPressed) {
        if(mouseX > 30 && mouseX < 120 && mouseY > 540 && mouseY < 580) {
            if(advance) {advance = false}
            sc = "home"
            
        }
    }
}
function option(y, op, v, n) {
    for(let i = 0; i < op.length; i++) {
        fill(v === n[i] ? color(50, 50, 255) : color(0, 0, 220))
        rect(260+i*108, y, 90, 40)
        fill(255, 255, 255)
        text(op[i], 272+i*109, y+25)
    }
}
function options() {
    background(c1)
    textSize(30)
    text("OPTIONS", 250, 100)
    textSize(15)
    textSize(18)
    text("ISLAND SIZE\n\nMOVEMENT SPEED\n(LAND)", 50, 200)
    option(170, ["MEDIUM", "LARGE", "HUGE"], islandSize, [200, 400, 1000])
    option(230, ["SLOW", "MEDIUM", "FAST"], spd, [0.4, 0.7, 1])
    if(mouseIsPressed && sc === "options") {
        if(mouseY > 170 && mouseY < 210) {
            if(mouseX > 260 && mouseX < 350) {islandSize = 200}
            else if(mouseX > 368 && mouseX < 458) {islandSize =  400}
            else if(mouseX > 476 && mouseX < 566) {islandSize = 1000} 
        }
        if(mouseY > 230 && mouseY < 270) {
            if(mouseX > 260 && mouseX < 350) {spd = 0.4}
            else if(mouseX > 368 && mouseX < 458) {spd = 0.7}
            else if(mouseX > 476 && mouseX < 566) {spd = 1}
        }
    }
    back()
}
function advanced() {
    background(c1)
    textSize(25)
    text("ADVANCED CONTROLS", 190, 120)
    textSize(20)
    text("G to toggle binoculars.\n\nInventory Controls:\nQ to drop item (while hovered)\nLMB to equip/unequip item", 100, 200)
    back()
}
function control() {
    background(c1)
    fill(255, 255, 255)
    textSize(30)
    text("CONTROLS", 220, 130)
    textSize(20)
    text(tcontrol, 80, 200)
    back()
    
    fill(0, 0, 200)
    rect(215, 505, 170, 40)
    fill(255, 255, 255)
    textSize(18)
    text("VIEW ADVANCED", 230, 530)
    if(mouseIsPressed && mouseX > 215 && mouseX < 385 && mouseY > 505 && mouseY < 555) {
        advance = true
    }
    if(advance) {advanced()}
}
function load() {
    background(c1)
    textSize(26)
    text("LOAD GAME", 230, 110)
    textSize(14)
    text("Make sure you have your save code entered into the\nsaveCode variable at line 19, then select New Game.", 100, 200)
    textSize(20)
    back()
}
function preload() {
    let sp = saveCode.split(" ").map(function(e) {return Number(e)})
    let sp2 = saveCode.split(" ")
    if(saveCode === "") {
        actual = ran
    } else {
        actual = sp[0]
        px = sp[1]
        py = sp[2]
        islandSize = sp[3]
        spd = sp[4]
        hr = sp[5]
        he = sp[6]
        ox = sp[7]
        thirst = sp[8]
        hunger = sp[9]
        res = sp2[11].split(",")
        tools = sp2[12].split(",")
    }
    seed = new Random(actual)
}
function home() {
    background(c1)
    let cond = [
        mouseX > 400 && mouseY > 180 && mouseY < 240,
        mouseX > 400 && mouseY > 240 && mouseY < 280, 
        mouseX > 400 && mouseY > 280 && mouseY < 320, 
        mouseX > 400 && mouseY > 320 && mouseY < 380, 
    ]
    let t = ["NEW GAME", "LOAD GAME", "CONTROLS", "OPTIONS"]
    
    if(loading) {
    }
    for(let i = 0; i < hm.length; i++) {
        for(let j = 0; j < hm[i].length; j++) {
            switch(hm[i][j]) {
                case "1": 
                    fill(240, 240, 175)
                    rect(j*15+220, i*15+200, 15, 15); 
                break;
                case "2":
                    fill(0, 150, 0)
                    rect(j*15+220, i*15+200, 15, 15)
                break;
                case "3":
                    fill(10, 117, 166);
                    rect(j*15+220, i*15+200, 15, 15)
            }
        }
    }
    
    textFont(createFont("sans-serif"))
    fill(255, 255, 255)
    textSize(30)
    text("STRANDED", 50, 270)
    textSize(60)
    text("KHAN", 50, 320)
    
    textFont(createFont("monospace"))
    textSize(20)
    for(let i = 0; i < t.length; i++) {
        fill(cond[i] ? color(200, 200, 200) : color(255, 255, 255))
        text(t[i], 440, 230+i*40)
    }
    
    if(mouseIsPressed) {
        if(cond[0]) {
            sc = "game"; 
            loading = true
            preload()
        }
        if(cond[1]) {sc = "load"}
        if(cond[2]) {sc = "controls"}
        if(cond[3]) {sc = "options"}
    }
}
//} home screen function
draw = function() {
    keyPressed = function() {
        keys[keyCode] = true
        keys[key.toString()] = true
        if(menu === 1) {drop()}
        refuel()
        switch(key.toString()) {
            case "z": ps = !ps; break
            case "f": mc(1); break
            case "a": mc(2); break
            case "g": zoomed = !zoomed; break
        }
    }
    keyReleased = function() {
        keys[keyCode] = false
        keys[key.toString()] = false
    }
    switch(sc) {
        case "home": home(); break
        case "game": game(); break
        case "load": load(); break
        case "options": options(); break
        case "controls": control(); break
    }
    textSize(15)
    fill(255, 255, 255)
    text(round(this.__frameRate), 10, 20)
}
