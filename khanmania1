/**
Hold UP to accelerate
Hold DOWN to brake/reverse
Press RIGHT/LEFT to turn right/left
Press R to respawn
Run into the green blocks at the end to finish

"Race" tracks are the normal tracks. They are mostly fullspeed maps that can be driven quickly

"Obstacle" tracks are harder tracks. They have blocks in the middle of the course and often entail very tight turns.

"Endurance" tracks are multi-lap tracks built for consistency. They are longer but easier.

Inspired by Trackmania

My records:
 
10.23s A-1 Race
10.17s A-2 Race
15.02s A-3 Obstacle
22.20s A-4 Endurance

13.85s B-1 Obstacle
14.82 B-2 Race
*/
{
var firstPerson = false; //is the game in first person?
var fov = 400; //the field of view (inverted)
var sz = 150;  //the size of each cube
var renderDistance = 5000; //how close each cube must be in order to be rendered in
}//SETTINGS

var mp = [
    [
    "111111111111111111111111111111",
    "1000000000000000000000000000001",
    "10000000000000000000000000000001",
    "100000000000000000000000000000001",
    "1000000000000000000000000000000001",
    "10000000000000000000000000000000001",
    "100000000000000000000000000000000001",
    "1111111111111111111110000000000000001",
    "00000000000000000000010000000000000001111111111",
    "000000000000000000000010000000000000000000000001",
    "0000000000000000000000010000000000000000000000001",
    "00000000000000000000000010000000000000000000000001",
    "000000000000000000000000010000000000000000000000001",
    "000000000000000000000000001000000000000000000000001",
    "000000000000000000000000000111111111111110000000001",
    "000000000000000000000000000000000000000001000000001",
    "0000000000000000000000000000000000000000001000000001",
    "0000000000000000000000000000000000000000000100000001",
    "0000000000000000000000000000000000000000000100000001",
    "0000000000000000000000000000000000000000000100000001",
    "0000000000000000000000000000000000000000000100000001",
    "000000000000000000000000000000000000000000100000001",
    "000000000000000000000000000000000000000000100000001",
    "000000000000000000000000000000000000000000100000001",
    "000000000000000000000000000000000000000000100000001",
    "000000000000000000000000000000000000000000100000001",
    "000000000000000000000000000000000000000000100000001",
    "000000000000000000000000000000000000000000100000001",
    "00000000000000000000000000000000000000000100000001",
    "00000000000000000000000000000000000000000100000001",
    "0000000000000000000000000000000000000000100000001",
    "0000000000000000000000000000000000000000100000001",
    "000000000000000000000000000000000000000100000001",
    "000000000000000000000000000000000000000100000001",
    "00000000000000000000000000000000000000100000001",
    "00000000000000000000000000000000000000100000001",
    "0000000000000000000000000000000000000100000001",
    "0000000000000000000000000000000000000100000001",
    "0000000000000000000000000000000000000100000001",
    "0000000000000000000000000000000000000100000001",
    "00000000000000000000000000000000000000100000001",
    "00000000000000000000000000000000000000100000001",
    "000000000000000000000000000000000000000100000001",
    "000000000000000000000000000000000000000100000001",
    "0000000000000000000000000000000000000000100000001",
    "0000000000000000000000000000000000000000100000001",
    "00000000000000000000000000000000000000000100000001",
    "00000000000000000000000000000000000000000100000001",
    "000000000000000000000000000000000000000000100000001",
    "000000000000000000000000000000000000000000100000001",
    "0000000000000000000000000000000000000000000100000001",
    "0000000000000000000000000000000000000000000100000001",
    "00000000000000000000000000000000000000000000100000001",
    "00000000000000000000000000000000000000000000100000001",
    "000000000000000000000000000000000000000000000100000001",
    "000000000000000000000000000000000000000000000100000001",
    "0000000000000000000000000000000000000000000000100000001",
    "0000000000000000000000000000000000000000000000100000001",
    "0000000000000000000000000000000000000000000000100000001",
    "0000000000000000000000000000000000000000000001000000001",
    "000000000000000000000000000000000000000000001000000001",
    "00000000000000000000000000000000000000000000100000001",
    "0000000000000000000000000000000000000000000100000001",
    "000000000000000000000000000000000000000000010000001",
    "000000000000000000000000000000000000000000010000001",
    "00000000000000000000000000000000000000000010000001",
    "0000000000000000000000000000000000000000010000001",
    "0000000000000000000000000000000000000000010000001",
    "1111111111111111111111111111111111111111100000001",
    "200000000000000000000000000000000000000000000001",
    "200000000000000000000000000000000000000000000001",
    "20000000000000000000000000000000000000000000001",
    "2000000000000000000000000000000000000000000001",
    "200000000000000000000000000000000000000000001",
    "20000000000000000000000000000000000000000011",
    "111111111111111111111111111111111111111111",
    ],//A-1 Race
    [
    "1111111110000000000000000000000000000000000000000000",
    "10000000011000000000000000000000000000000000000000000",
    "10000000000110000000000000000000000000000000000000000",
    "10000000000001100000000000000000000000000001111110000",
    "100000000000000110000000000000000000000000111111111111",
    "100000000000000001111111100000000000000001000000000002",
    "100000000000000000000000011000000000000010000000000002",
    "111111111000000000000000000110000000000010000000000002",
    "000000000110000000000000000001000000000010000000000002",
    "000000000001100000000000000000100000000010000000000002",
    "000000000000011000000000000000010000000100000001111111",
    "000000000000000111111111000000010000001000000010000000",
    "000000000000000000000000100000001000010000000010000000",
    "000000000000000000000000010000001000100000000100000000",
    "000000000000000000000000010000001001000000001000000000",
    "00000000000000000000000001000000100100000001000000000",
    "00000000000000000000000001000000100100000010000000000",
    "00000000000000000000000001000000100100000010000000000",
    "00000000000000000000000001000000100100000010000000000",
    "00000000000000000000000001000000100100000010000000000",
    "00000000000000000000000001000000100100000010000000000",
    "00000000000000000000000001000000100100000010000000000",
    "00000000000000000000000001000000100100000010000000000",
    "00000000000000000000000010000000100100000010000000000",
    "00000000000000000000000100000001000100000010000000000",
    "00000000000000000000001000000010000100000010000000000",
    "00000000000000000000010000000100000100000010000000000",
    "00000000000000000000100000001000000100000010000000000",
    "00000000000000000001000000010000000100000010000000000",
    "00000000000000000010000000100000000100000010000000000",
    "00000000011111111100000001000000000100000010000000000",
    "00000000100000000000000010000000000100000010000000000",
    "00000001000000000000000100000000000100000010000000000",
    "00000010000000000000001000000000001000000010000000000",
    "00000100000000000000010000000000001000000010000000000",
    "00000100000000000000100000000000010000000010000000000",
    "00000100000000011111000000000000010000000010000000000",
    "00000100000000100000000000000000100000000010000000000",
    "00000100000001000000000000000000100000000100000000000",
    "00000100000001000000000000000001000000000100000000000",
    "00000100000001000000000000000001000000000100000000000",
    "00000100000001000000000000000001000000000100000000000",
    "00000100000001000000000000000001000000000100000000000",
    "00000100000001000000000000000001000000000100000000000",
    "00000100000001000000000000000001000000000100000000000",
    "00000100000001000000000000000001000000000100000000000",
    "00000100000000100000000000000010000000000100000000000",
    "00000100000000011111111111111100000000000100000000000",
    "00000100000000000000000000000000000000001000000000000",
    "00000010000000000000000000000000000000010000000000000",
    "00000001000000000000000000000000000000100000000000000",
    "00000000100000000000000000000000000000100000000000000",
    "00000000010000000000000000000000000001000000000000000",
    "00000000001111111111111111111111111110000000000000000",
    "00000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000000000",

    ],//A-2 Race
    [
    "11111111111111111111111111111111111111111111",
    "1000000000000000000000000000100000000000000011", 
    "100000000000000000000000000010000000000000000011", 
    "1000000000000010000000000000000000000000000000001", 
    "10000000000000100000000000000000000000000000000001",
    "100000000000000000000000000010000000000000000000001",
    "100000000000000000000000000010000000000000000000001",
    "1111111111111111111111111111111111111111111000000001",
    "0000000000000000000000000000000000000000000100000001",
    "00000000000000000000000000000000000000000000100000001",
    "00000000000000000000000000000000000000000000010000001",
    "00000000000000000000000000000000000000000000010000001",
    "00000000000000000000000000000000000000000000010000001",
    "00000000000000000000000000000000000000000000010000001",
    "00000000000000000000000000000000000000000000010000001",
    "00000000000000000000000000000000000000000000010000001",
    "00000000000000000000000000000000000000000000010000001",
    "00000000000000000000000000000000000000000000010000001",
    "00000000000000000000000000000000000000000000010001001",
    "00000000000000000000000000000000000000000000010000001",
    "00000000000000000000000000000000000000000000010000001",
    "00000000000000000000000000000000000000000000010000001",
    "00000000000000000000000000000000000000000000010000001",
    "00000000000000000000000000000000000000000000010000001",
    "00000000000000000000000000000000000000000000011000011",
    "00000000000000000000000000000000000000000000010000001",
    "00000000000000000000000000000000000000000000010000001",
    "00000000000000000000000000000000000000000000010000001",
    "00000000000000000000000000000000000000000000010000001",
    "00000000000000000000000000000000000000000000010000001",
    "00000000000000000000000000000000000000000000010000001",
    "00000000000000000000000000000000000000000000100000001",
    "00000000000000000000000000000000000000000001000000001",
    "0000000000000000000000000000000000000000001000000001",        "0000000000000000011111111111111111111111110000000001",
    "000000000000000110000000000000000000000000000000001",
    "00000000000001100000000000000000000000000000000001",
    "00000000000001000000000000000000000000000000000001",
    "0000000000001000000000000000000010000000000000001",
    "000000000001000000000000000000000000000000000001",
    "00000000000100000000000000000000000000000000011",
    "000000000010000000000011111111111111111111111",
    "0000000000100000000001",
    "000000000010000000001",
    "0000000000100000000100000000000000000000000000000000",
    "0000000000010000000100000000000000000000000000000000",
    "0000000000010000000010000000000000000000000000000000",
    "0000000000001000000001100000000000000000000000000000",
    "0000000000000100000000011",
    "000000000000001000000000011000000000000000000000000",
    "000000000000000100000000000100000000000000000000000",
    "000000000000000011000000000010000000000000000000000",
    "000000000000000000110000000001000000000000000000000",
    "0000000000000000000011000000001000000000000000000",
    "000000000000000000000010000000010000000000000000000",
    "0000000000000000000000100000000100000000000000000000",
    "00000000000000000000010000000001000000000000000000000",
    "000000000000000000001000000000010000000000000000000000",
    "000000000000000000001000001000010000000000000000000",
    "00000000000000000000100000000001000000000",
    "0000000000000000000010000000000010000000000000000000",
    "0000000000000000000001000000000001",
    "0000000000000000000000100000000000111111111100000",
    "0000000000000000000000010000000000000000000011",
    "00000000000000000000000100000000000000000000001",
    "000000000000000000000000100000000000000000000001",
    "0000000000000000000000000100000000000000000000001",
    "00000000000000000000000000100000000000000000000001",
    "00000000000000000000000000011000000000000000000001",
    "00000000000000000000000000000111111111000000000001",
    "00000000000000000000000000000100000000000000000001",
    "0000000000000000000000000000100000000000000000001",
    "0000000000000000000000000000100000000000000000001",
    "000000000000000000000000000100000000000000000001",
    "00000000000000000000000000100000000000000000001",
    "0000000000000000000000000100000000000000000001",
    "000000000000000000000000100000000000000000011",
    "0000000000000000000000010000000000000000011",
    "11111111111111111111111000000000111111111",
    "20000000000000000000000000000011000",
    "2000000000000000000000000000010000",
    "2000000000000000000000000000100000",
    "2000000000000000000000000001000000",
    "2000000000000000000000000010000000",
    "200000000000000000000000110000000",
    "1111111111111111111111110000000000",
    // A-3 Obstacle
    ],//A-3 Obstacle
    [
"111111111111111111111111111111111111111111111111111111111",
"100000000020000000000000000000000000000000000000000000001",
"100000000020000000000000000000000000000000000000000000001",
"100000000020000000000000000000000000000000000000000000001",
"100000000020000000000000000000000000000000000000000000001",
"100000000020000000000000000000000000000000000000000000001",
"100000000111111111111111111111111111111111111110000000001",
"100000001000000000000000000000000000000000000001000000001",
"100000010000000000000000000000000000000000000000100000001",
"100000010000000000000000000000000000000000000000010000001",
"100000010000000000000000000000000000000000000000010000001",
"100000010000000000000000000000000000000000000000010000001",
"100000010000000000000000000000000000000000000000010000001",
"100000010000000000000000000000000000000000000000010000001",
"100000010000000000000000000000000000000000000000010000001",
"100000010000000000000000000000000000000000000000010000001",
"100000010000000000000000000000000000000000000000010000001",
"100000010000000000000000000000000000000000000000010000001",
"100000010000000000000000000000000000000000000000010000001",
"100000010000000000000000000000000000000000000000010000001",
"100000010000000000000000000000000000000000000000010000001",
"100000010000000000000000000000000000000000000000010000001",
"100000010000000000000000000000000000000000000000010000001",
"100000010000000000000000000000000000000000000000010000001",
"100000010000000000000000000000000000000000000000010000001",
"100000010000000000000000000000000000000000000001000000001",
"100000010000000000000000000000000000000000000001000000001",
"100000001000000000000000000000000000000000000010000000001",
"100000000111111111111111111111111111111111111100000000001",
"100000000000000000000000000000000000000000000300000000001",
"100000000000000000000000000000000000000000000300000000001",
"100000000000000000000000000000000000000000000300000000001",
"100000000000000000000000000000000000000000000300000000001",
"100000000000000000000000000000000000000000000300000000001",
"11111111111111111111111111111111111111111111111111111111",
    ],//A-4 Endurance
    [
"1111111111110000000001111111111111111100000000000000000000",
"10000000000100000000100000000000000000100000000000000000000",
"10000000000100000001000000000000000000010000000000000000000",
"10000000000100000010000000000000000000001000000000000000000",
"100000000001000000100000000000000000000010000000000000000000",
"10000000000100000010000000001110000000001000000000000000000",
"10000000000100000010001000010001000000001000000000000000000",
"0100000000010000001000000001000100000000100000000000000000",
"001000000001000000100000000100010000000010000000000000000000",
"00010000000100000010000000010001000100001000000000000000000",
"00010000000100000010000000010001000000001000000000000000000",
"00010000000100000010000000010001000000001000000000000000000",
"00010000000100000010000000010001000000001000000000000000000",
"00010000000011111100000000010001000000001000000000000000000",
"00010000000000000000000000010001000000001000000000000000000",
"00010000000000000000000000010001000000000100000000000000000",
"00001000000000000000000000100000100000000011111111110000000",
"12222100000000001000000001000000010000000000000000001000000",
"10000110000000000000000010000000001000000000010000000100000",
"10000101000000000000000100000000000100000000000000000010000",
"10000100111111111111111000111111111110000000000000000001000",
"10000100000000000000000001000000000011000000000000000000100",
"10000100000000000000000110000000000001111111111110000000010",
"10000010000000000000001000000010000001000000000001000000010",
"10000001100000000000001000000000000000110000000000100000001",
"10000000010000000000010000000000000000001000000001000000001",
"10000000001000000000100000011111100000000111111110000000010",
"01000000000111111111000000100000100000000000000000000000100",
"00100000000000000000000001000000010000000000000000000001000",
"00010000000000000000000010000000001000000000001000000010000",
"00001100000001000000000100000000000100000000000000000100000",
"00000010000000000000001000000000000010000000000000001000000",
"0000000100000000000000100000000000000111111111111111000000",
"0000000011111111111111000000000000000000000000000000000000",
"00000000000000000000000000000000000000000000000000000000000",
],//B-1 Obstacle
    [
"111111111111111111111111111111111111111111111111111110000000",
"100000000000000000000000000000000000000000000000000001000000",
"100000000000000000000000000000000000000000000000000000100000",
"100000000000000000000000000000000000000000000000000000010000",
"100000000000000000000000000000000000000000000000000000001000",
"100000000000000000000000000000000000000000000000000000000100",
"1111111111111111111111111111111111111111111111000000000001",
"00000000000000000000000000000000000000000000001000000000010",
"00000000000000000000000000000000000000000000000100000000010",
"000000000000000000000000000000000000000000000000100000000100",
"000000000000000000000000000000000000000000000001000000000100",
"000000000000000111111111111111111111111100000010000000001000",
"000000000000001000000000000000000000000200000100000000010000",
"000000000000010000000000000000000000000200001000000000100000",
"000000000000100000000000000000000000000200010000000001000000",
"000000000001000000000000000000000000000200100000000001000000",
"000000000010000000000000000000000000000200100000000001000000",
"000000000100000001111111111111111111111100100000000001000000",
"000000001000000010000000000000000000000000010000000001000000",
"000000010000000100000000000000000000000000001000000001000000",
"000000100000001000000000000000000000000000000100000000100000",
"000001000000010000000000000000000000000000000010000000010000",
"000010000000100000000000000000000000000000000001000000001000",
"000100000001000000000000000000000000000000000000100000000100",
"001000000010000000000000000000000000000000000000010000000010",
"010000000100000000000000000000000000000000000000001000000001",
"100000001000000000000000000000000000000000000000001000000001",
"100000001000000000000000000000000000000000000000001000000001",
"100000001000000000000000000000000000000000000000001000000001",
"100000001000000000000000000000000000000000000000001000000001",
"100000001000000000000000000000000000000000000000010000000010",
"10000000100000000000000000000000000000000000000010000000010",
"010000000100000000000000000000000000000000000001000000001000",
"001000000010000000000000000000000000000000000010000000010000",
"000100000001000000000000000000000000000000000100000000100000",
"000010000000100000000000000000009000000000001000000001000000",
"000001000000010000000000000000000000000000010000000010000000",
"000000100000001000000000000000000000000000010000000010000000",
"000000100000001000000000000000000000000000010000000010000000",
"000000100000001000000000000000000000000000010000000010000000",
"000000100000001000000000000000000000000000010000000010000000",
"000000100000001000000000000000000000000000010000000010000000",
"000000100000001000000000000000000000000000010000000010000000",
"000001000000010000000000000000000000000000001000000001000000",
"000010000000100000000000000000000000000000000100000000100000",
"000100000001000000000000000000000000000000000010000000010000",
"001000000010000000000000000000000000000000000001000000001000",
"010000000100000000000000000000000000000000000000100000000100",
"100000001000000000000000000000000000000000000000010000000010",
"100000001000000000000000000000000000000000000000001000000001",
"100000001000000000000000000000000000000000000000001000000001",
"100000001000000000000000000000000000000000000000001000000001",
"100000000100000000000000000000000000000000000000001000000001",
"010000000010000000000000000000000000000000000000010000000001",
"00100000000111111111111111111111111111111111111110000000001",
"00010000000000000000000000000000000000000000000000000000001",
"0000100000000000000000000000000000000000000000000000000001",
"000001000000000000000000000000000000000000000000000000001000",
"000000100000000000000000000000000000000000000000000000010000",
"000000010000000000000000000000000000000000000000000000100000",
"000000001111111111111111111111111111111111111111111111000000",
    ],//B-2 Race
    [],//B-3 Endurance
    [],//B-4 Endurance
]; //the entire map of the track

{
var homecubes = [];
var keys = [], cubes = [], finishes = [], rec = [];
var finished = false, started = false;
var timer = 0, countdown = 3;
var scene = "select", currmap;
var laps = 0;
}//variables
//{
function avgSort(arr) {
    arr.sort(function(a, b) {
        return a.average - b.average;
    });
}
//} sort average
//{
function Car(p) {
    this.p = p;
    this.turn = 0;
    this.speed = 0;
    this.checked = false;
    this.canMove = function(dir) {
        for(var b in cubes) {
            if(cubes[b].average+this.speed*dir < sz*1.3 && !cubes[b].gothrough && !cubes[b].isfinish) {
                this.speed = -this.speed/2.5;
                return false;
            }
            if(cubes[b].ischeck && cubes[b].average+this.speed*dir < sz*1.3) {
                this.checked = true;
            }
            if(cubes[b].isfinish && cubes[b].average+this.speed*dir < sz*1.3 && this.checked) {
                if(laps < 3 && currmap === 4) {
                    laps++;
                    this.checked = false;
                }
            }
        }
        return true;
    };
}
//} car
//{
function Player(p, turn, speed, canMove) {
    Car.call(this, p, turn, speed, canMove);
    this.b = new PVector(0, 60, 0);
    this.nx = this.b.x-40;
    this.ny = this.b.y-20;
    this.nz = this.b.z-80;
    this.px = this.b.x+40;
    this.py = this.b.y+20;
    this.pz = this.b.z+80;
    this.nodes = [
        new PVector(this.nx, this.ny, this.nz),
        new PVector(this.nx, this.ny, this.pz),
        new PVector(this.nx, this.py, this.nz),
        new PVector(this.nx, this.py, this.pz),
        new PVector(this.px, this.ny, this.nz),
        new PVector(this.px, this.ny, this.pz),
        new PVector(this.px, this.py, this.nz),
        new PVector(this.px, this.py, this.pz)
    ];
    this.faces = [
        [0,1,3,2],
        [3,2,6,7],
        [7,5,4,6],
        [0,4,5,1],
        [0,2,6,4],
        [1,3,7,5]
    ];
    this.controls = function() {
        this.speed = constrain(this.speed, -50, 50);
        var B = this.speed < 0 ? this.canMove(1) : this.canMove(-1);
        if(keys[UP] && this.canMove()) {this.speed -= 0.1;}
        else if(keys[DOWN]) {this.speed += 0.1;}
        else {this.speed += -Math.sign(this.speed)/25;}
        for(var k in cubes) {
            for(var l in cubes[k].nodes) {
                var that = cubes[k].nodes[l];
                if(abs(this.speed) > 0.1) {
                    that.z += this.speed;
                }
            }
        }
        if(keys[RIGHT]) {this.turn = 1;}
        else if(keys[LEFT]) {this.turn = -1;}
        else {this.turn = 0;}
        
    };
    this.deepest = function() {
        var minZ = -Infinity;
        for(var p in this.nodes) {
            var node = this.nodes[p];
            var Dist = dist(0,0,0,node.x,node.y,node.z);
            minZ = max(minZ, Dist);
        }
        return minZ;
    };
    this.visible = function(face) {
        for(var a in face) {
            var node = this.nodes[face[a]];
            var Dist = dist(0,0,0,node.x,node.y,node.z);
            if(this.dz === Dist) {
                return false;
            }
        }
        return true;
    };//is this face visible?
    this.draw = function() {
        for(var a in this.faces) {
            var n1 = this.nodes[this.faces[a][0]];
            var n2 = this.nodes[this.faces[a][1]];
            var n3 = this.nodes[this.faces[a][2]];
            var n4 = this.nodes[this.faces[a][3]];
            
            var N1 = [n1.x*fov/n1.z, n1.y*fov/n1.z];
            var N2 = [n2.x*fov/n2.z, n2.y*fov/n2.z];
            var N3 = [n3.x*fov/n3.z, n3.y*fov/n3.z];
            var N4 = [n4.x*fov/n4.z, n4.y*fov/n4.z];
            if(n1.z > 0 && n2.z > 0 && n3.z > 0 && n4.z > 0 && this.visible(this.faces[a])) {
                fill(0, 0, 255);
                quad(N1[0], N1[1], N2[0], N2[1], N3[0], N3[1], N4[0], N4[1]);
            }
        }
    };
    this.display = function() {
        this.controls();
    };
}
var player = new Player(new PVector(-100, 30, -100));

function Ghost(p, turn, speed, canMove) {
    Car.call(this, p, turn, speed, canMove);
    this.b = new PVector(0, 60, 0);
    this.nx = this.b.x-40;
    this.ny = this.b.y-20;
    this.nz = this.b.z-80;
    this.px = this.b.x+40;
    this.py = this.b.y+20;
    this.pz = this.b.z+80;
    this.nodes = [
        new PVector(this.nx, this.ny, this.nz),
        new PVector(this.nx, this.ny, this.pz),
        new PVector(this.nx, this.py, this.nz),
        new PVector(this.nx, this.py, this.pz),
        new PVector(this.px, this.ny, this.nz),
        new PVector(this.px, this.ny, this.pz),
        new PVector(this.px, this.py, this.nz),
        new PVector(this.px, this.py, this.pz)
    ];
    this.faces = [
        [0,1,3,2],
        [3,2,6,7],
        [7,5,4,6],
        [0,4,5,1],
        [0,2,6,4],
        [1,3,7,5]
    ];
    this.controls = function() {
        this.speed = constrain(this.speed, -50, 50);
        var B = this.speed < 0 ? this.canMove(1) : this.canMove(-1);
        if(keys[UP] && this.canMove()) {this.speed -= 0.1;}
        else if(keys[DOWN]) {this.speed += 0.1;}
        else {this.speed += -Math.sign(this.speed)/25;}
        for(var k in cubes) {
            for(var l in cubes[k].nodes) {
                var that = cubes[k].nodes[l];
                if(abs(this.speed) > 0.1) {
                    that.z += this.speed;
                }
            }
        }
        if(keys[RIGHT]) {this.turn = 1;}
        else if(keys[LEFT]) {this.turn = -1;}
        else {this.turn = 0;}
        
    };
    this.deepest = function() {
        var minZ = -Infinity;
        for(var p in this.nodes) {
            var node = this.nodes[p];
            var Dist = dist(0,0,0,node.x,node.y,node.z);
            minZ = max(minZ, Dist);
        }
        return minZ;
    };
    this.visible = function(face) {
        for(var a in face) {
            var node = this.nodes[face[a]];
            var Dist = dist(0,0,0,node.x,node.y,node.z);
            if(this.dz === Dist) {
                return false;
            }
        }
        return true;
    };//is this face visible?
    this.draw = function() {
        for(var a in this.faces) {
            var n1 = this.nodes[this.faces[a][0]];
            var n2 = this.nodes[this.faces[a][1]];
            var n3 = this.nodes[this.faces[a][2]];
            var n4 = this.nodes[this.faces[a][3]];
            
            var N1 = [n1.x*fov/n1.z, n1.y*fov/n1.z];
            var N2 = [n2.x*fov/n2.z, n2.y*fov/n2.z];
            var N3 = [n3.x*fov/n3.z, n3.y*fov/n3.z];
            var N4 = [n4.x*fov/n4.z, n4.y*fov/n4.z];
            if(n1.z > 0 && n2.z > 0 && n3.z > 0 && n4.z > 0 && this.visible(this.faces[a])) {
                fill(0, 0, 255);
                quad(N1[0], N1[1], N2[0], N2[1], N3[0], N3[1], N4[0], N4[1]);
            }
        }
    };
    this.display = function() {
        this.controls();
    };
}
var ghost = new Ghost(new PVector(-100, 30, -100));
//} player
//{
function Cam() {
    this.display = function() {
        this.p = new PVector(0, 300, 800);
        for(var c in cubes) {
            for(var d in cubes[c].nodes) {
                var node = cubes[c].nodes[d];
                //node.add(this.p);
            }
        }
        
        for(var d in player.nodes) {player.nodes[d].add(this.p);}
        for(var e in ghost.nodes) {ghost.nodes[d].add(this.p);}
    };
}
var cam = new Cam();
//} camera
//{
function Cube(p) {
    {
    this.p = p;
    this.nx = this.p.x-sz/2;  //this.negx is the position of the cube minus the size
    this.px = this.p.x+sz/2;
    this.ny = this.p.y-sz/2;
    this.py = this.p.y+sz/2;
    this.nz = this.p.z-sz/2;
    this.pz = this.p.z+sz/2;
    }
    this.nodes = [
        new PVector(this.nx, this.ny, this.nz),
        new PVector(this.nx, this.ny, this.pz),
        new PVector(this.nx, this.py, this.nz),
        new PVector(this.nx, this.py, this.pz),
        new PVector(this.px, this.ny, this.nz),
        new PVector(this.px, this.ny, this.pz),
        new PVector(this.px, this.py, this.nz),
        new PVector(this.px, this.py, this.pz)
    ]; // all the nodes
    this.faces = [
        [0,1,3,2],
        [3,2,6,7],
        [7,5,4,6],
        [0,4,5,1],
        [0,2,6,4],
        [1,3,7,5]
    ]; // all the faces
    this.findAverage = function() {
        var sum = 0;
        this.nodes.forEach(function(that) {
            var Dist = dist(0,0,0,that.x,that.y,that.z);
            sum += Dist;
        });
        sum /= this.nodes.length;
        return sum;
    };//finds the average distance that this cube is away from the player
    this.visible = function(face) {
        for(var a in face) {
            var node = this.nodes[face[a]];
            var Dist = dist(0,0,0,node.x,node.y,node.z);
            if(this.dz === Dist) {
                return false;
            }
        }
        return true;
    };//is this face visible?
    this.deepest = function() {
        var minZ = -Infinity;
        for(var p in this.nodes) {
            var node = this.nodes[p];
            var Dist = dist(0,0,0,node.x,node.y,node.z);
            minZ = max(minZ, Dist);
        }
        return minZ;
    };//finds the node furthest away from you
    this.draw = function(col) {
        for(var a in this.faces) {
            var incY = firstPerson ? 0 : 300;
            var incZ = firstPerson ? 0 : 800;
            var n1 = this.nodes[this.faces[a][0]];
            var n2 = this.nodes[this.faces[a][1]];
            var n3 = this.nodes[this.faces[a][2]];
            var n4 = this.nodes[this.faces[a][3]];
            var N1 = [n1.x*fov/(n1.z+incZ), (n1.y+incY)*fov/(n1.z+incZ)];
            var N2 = [n2.x*fov/(n2.z+incZ), (n2.y+incY)*fov/(n2.z+incZ)];
            var N3 = [n3.x*fov/(n3.z+incZ), (n3.y+incY)*fov/(n3.z+incZ)];
            var N4 = [n4.x*fov/(n4.z+incZ), (n4.y+incY)*fov/(n4.z+incZ)];
            if(n1.z > 0 && n2.z > 0 && n3.z > 0 && n4.z > 0 && this.visible(this.faces[a]) && this.average < renderDistance) {
                fill(col);
                quad(N1[0], N1[1], N2[0], N2[1], N3[0], N3[1], N4[0], N4[1]);
            }
        }
    }; //draws the cube
    this.rot = function(theta) {
        var ct = cos(theta);
        var st = sin(theta);
        for(var h in this.nodes) {
            var that = this.nodes[h];
            var x = that.x;
            var z = that.z;
            that.x = x*ct + z*st;
            that.z = z*ct - x*st;
        }
    }; //rotates everything
    this.display = function() {
        this.average = this.findAverage();
        this.dz = this.deepest();
        if(this.p.y <= 0) {this.draw(color(255, 0, 0));}
        if(keys[RIGHT] || keys[LEFT]) {
            this.rot(-player.turn*2);
        }
    };
}
function Finish(p, nx, px, ny, py, nz, pz, nodes, faces, findAverage, visible, deepest, draw, rot) {
    Cube.call(this, p, nx, px, ny, py, nz, pz, nodes, faces, findAverage, visible, deepest, draw, rot);
    this.isfinish = true;
    this.finish = function() {
        if(this.average < sz*1.7 && ((currmap === 4 && laps === 3) || (currmap !== 4))) {
            finished = true;
        }
    };
    this.display = function() {
        this.finish();
        this.average = this.findAverage();
        this.dz = this.deepest();
        if(this.p.y <= 0) {this.draw(color(0, 255, 0));}
        if(keys[RIGHT] || keys[LEFT]) {
            this.rot(-player.turn*2);
        }
    };
}
function Checkpoint(p, nx, px, ny, py, nz, pz, nodes, faces, findAverage, visible, deepest, draw, rot) {
    Cube.call(this, p, nx, px, py, nz, pz, nodes, faces, findAverage, visible, deepest, draw, rot);
    this.gothrough = true;
    this.ischeck = true;
    this.display = function() {
        this.average = this.findAverage();
        this.dz = this.deepest();
        if(keys[RIGHT] || keys[LEFT]) {
            this.rot(-player.turn*2);
        }
    };
}
//} building blocks
//{
function HUD() {
    fill(0); textSize(15); textAlign(LEFT);
    text(round(this.__frameRate), 10, 20);
    textSize(55); textAlign(RIGHT);
    text(abs(round(player.speed*3)), 500, 530);
    textSize(45); textAlign(CENTER);
    text(!started ? round(countdown) : round(timer*100)/100 + "s", 300, 150);
    textSize(35); textAlign(RIGHT);
    text("mph", 570, 530);
    if(countdown < 0.5) {started = true;}
    if(!finished && started) {timer += 0.015;}
    countdown -= 0.015;
    if(currmap === 4) {
        text(laps+1+"/"+3, 550, 50);
    }
}
//} HUD
//{
function Init() {
player.speed = 0;
for(var f = 0; f < mp[currmap-1].length; f++) {
    for(var m = 0; m < mp[currmap-1][f].length; m++) {
        switch(mp[currmap-1][f][m]) {
            case "1": cubes.push(new Cube(new PVector(f*sz, 0, m*sz))); break;
            case "2": cubes.push(new Finish(new PVector(f*sz, 0, m*sz))); break;
            case "3": cubes.push(new Checkpoint(new PVector(f*sz, 0, m*sz))); break;

        }
    }
}
cubes.forEach(function(that) {
    for(var q in that.faces) {
        for(var s in that.faces[q]) {
            var node = that.nodes[that.faces[q][s]];
            node.add(player.p);
            if(currmap === 4) {
                node.add(new PVector(0, 0, -1000));
            }
        }
    }
}); //moves every cube to the starting position of the player

} //generates every cube
//} map initialization
//{
function Home() {
    this.draw = function() {
        noStroke();
        background(0, 150, 255);
        fill(200, 200, 200);
        rect(225, 365, 170, 50, 10);
        fill(0, 100, 0); textSize(40);
        text("Khanmania", 210, 150);
        textSize(20);
        text("A 3D Racing Game", 225, 180);
        textSize(30);
        text("Campaign", 240, 400);
        if(mouseIsPressed) {
            if(mouseX > 230 && mouseX < 390 && mouseY > 370 && mouseY < 410) {
                scene = "select";
            }
        }
    };
    this.display = function() {
        this.draw();
    };
}
//} home
//{
function Type(v) {
    keyPressed = function() {
        switch(keyCode) {
            case DOWN: v.selected += 4; break;
            case UP: v.selected -= 4; break;
            case LEFT: v.selected -= 1; break;
            case RIGHT: v.selected += 1; break;
            
        }
        if(key.toString() === " ") {
            scene = "race";
            Init();
            if(!firstPerson) {
                cam.display();
            }
        }
    };
    v.selected = constrain(v.selected, 1, 32);
}
function Select() {
    this.selected = 1;
    this.draw = function() {
        background(0, 150, 255);
        for(var f = 0; f < 4; f++) {
            for(var g = 0; g < 8; g++) {
                fill(200, 200, 200);
                strokeWeight(this.selected === g*4+f+1 ? 4 : 1);
                rect(f*130+40, g*50+30, 130, 50);
            }
        }
        Type(this);
        fill(0);
        textSize(20);
        text("A-1 Race", 67, 60);
        text("A-2 Race", 195, 60);
        text("A-3 Obstacle", 310, 60);
        text("B-1 Obstacle", 50, 110);
        text("B-2 Race", 195, 110);
        textSize(18);
        text("A-4 Endurance", 435, 58);
        currmap = this.selected;
        
        textSize(23);
        text("Use arrow keys to switch between tracks\nPress SPACE to play the track", 100, 500);
        
        if(keyIsPressed && key.toString() === ' ') {
            scene = "race";
        }
    };
    this.display = function() {
        this.draw();
    };
}
//} track selection
//{
function restart() {
    cubes = [];
    Init();
    timer = 0;
    countdown = 3;
}
//} restart
var home = new Home();
var select = new Select();
homecubes.push(new Cube(new PVector(0, -50, 500)));
draw = function() {
switch(scene) {
    case "race": {
    background(255, 255, 255);
    fill(150, 150, 150);
    rect(0, 300, 600, 300);
    keyPressed = function() {
        keys[keyCode] = true;
        if(key.toString() === 'r') {
            restart();
        }
    };
    keyReleased = function() {keys[keyCode] = false;};
    pushMatrix();
    translate(300, 300);
    avgSort(cubes);
    cubes.reverse();
    cubes.forEach(function(that) {that.display();});
    if(started) {
        player.display();
        ghost.display();
    }
    //ghost.draw();
    player.draw();
    popMatrix();
    HUD();
    }
    break;
    case "home": {
    home.display();
    pushMatrix();
    translate(300, 300);
    homecubes.forEach(function(that) {
        stroke(0);
        that.display();
        that.rot(5);
    });
    popMatrix();
    }
    break;
    case "select": select.display();
    break;
}
};
