/**

-10/19 songs completed
-All songs are modeled off of the real game

CONTROLS: 
UP and DOWN arrow keys to change songs
LEFT and RIGHT arrow keys to change difficulty
WASD or arrow keys to press notes
SPACE to start selected song
Q to quit out of song
ENTER to restart song

You may change the keybinds. (below)
**/
var keyLeft = 'a';
var keyDown = 's';
var keyUp = 'd';
var keyRight = 'f';
var keyLeft2 = LEFT; 
var keyDown2 = DOWN;
var keyUp2 = UP;
var keyRight2 = RIGHT;

{
noStroke();
var dead = false;
var numnotes = 0;
var spread;
var speed;
var healthpen = 3;
var healthgain = 2;
var menuclosed = false;
var correct = 0;
var score = 0;
var add = 0;
var health = 50;
var diff = 2;
var deadtime = 0;

var note = 0;
var timer = -50;
var notes = [];
var con = 0;
var done = 0;

var movup = false;
var movdown = false;
var song = 0;
var songx = 0;
var songs = 5;
var songplayed = 0;
}//variables
{
var songs = [
    
//{
//tutorial
[1,,,,,,,4,,,,,,,1,,,,,,,,3,,,,,,2,,,,,,,3,,,,,,,2,,,,,,,,,1,,,,,,,3,,,,,,,2,,,,,,,4,,,,,,,2,,,,2,,,,3,,,,,,,,2,,,,2,,,,4,,,,,,,,2,,3,,4,,3,,2,,1,,2,,3,,4,,1,,2,,4,,3],
//bopeebo
[3,,,4,,,4,,,,,,2,,,1,,,4,,,,,,2,,,,4,,1,,3,,,,,,4,,2,,,1,,3,,,,,,,1,,4,,2,,,,,,,,,2,,4,,1,,,,,,,3,,4,,1,,,,,,,,1,,4,,,,3,,2,,,,,,,,3,,,4,,,1,,,,,,,,,2,,,3,,,2,2,2,,3,,,,,,,,,3,,,4,,,1,,,,,,,,,,,1,,,,,,,,,,,,,3,,4,,1,,,,,,,,,,3,,1,,4,,,3,,2,,,,,,,,,3,,4,,1,,3,,2,,,,,,,,,3,,1,4,,,3,,2],
//fresh
[2,,2,,4,,4,,2,1,3,,2,,1,,,,,,,,,2,,2,,4,,4,,2,1,3,2,,4,,,,,,,,,,,1,,2,,3,,,,,,,,,,1,,3,,4,,1,,,,,,,,,,,1,,2,,4,,1,,3,,,,,,4,,2,,2,,3,,4,,2,,,1,,,,,,,4,,,1,,,2,,2,,1,,,2,,3,,4,,1,,3,,4,,2,,,,,,,,1,,4,,2,,4,,2,,3,,,1,,4,,1,,3,,2,,,,,,,,2,,2,,4,,,4,,,3,2,,3,,1,4,,,,,,,,,,2,,2,,4,,4,,,2,1,3,,2], 
//dad battle
[3,,,2,,,3,,,1,4,,3,,4,,1,,,3,,,1,,4,,,,,,,,,,2,,,1,,4,,2,,,,,2,,,1,,1,,4,,4,,4,,4,,,,,,,,,,,3,,,4,,,2,,4,,1,,,,,3,,,2,,,1,,,3,,,1,,,4,,3,,,,,,,,,,,,,,,,,,,,,,1,,,3,,,3,,,1,,2,,1,,4,,3,,,1,,,3,,4,,,3,,,1,,,1,,,2,,,4,,,2,,,3,,,4,,,1,,,,,2,,4,,,1,,,2,,,1,,,1,,3,,4,,,,,1,,4,,,3,,4,,,4,,1,,,3,,,4,,,4,,,,,,,3,,,1,,,3,,,1,4,,3,,4,1,,,4],
//}//week 1
//{
//spookeez
[1,,,4,,,4,,,3,,4,,2,,,4,,,3,,,1,4,,,,,,,,,,,,,,,,,3,,2,1,,1,,3,4,2,,,2,,1,,4,,4,,1,,1,,3,,,,,,,,,,,,,,,,,,,3,1,,,4,,4,,4,,4,,3,4,,,4,,,4,,,2,4,4,3,1,,,4,,4,,,4,,4,,3,4,,4,,2,,,3,,3,,,,,,,,,,,,,,,,,1,,,4,,,4,,,3,,4,,2,,4,,4,,,3,,,,1,4,,,,,,,,,,,,3,,2,1,,1,,3,,1,2,,2,1,4,4,,,1,,1,,3,,,,,,,,,,,,,,,,,1,,4,,3,1,,4,,4,4,,4,,4,,3,4,,,4,,4,2,,4,,4,,3,1,,4,,4,,4,4,,3,4,,,4,,4,,,,,,,,,,,3,7,7,7,,,4,8,8,8,8,8,,,,2,6,6,,3,7,7,,3,,4,,1,,2,6,6,6,,3,7,7,,,2,,,2,,4,,,4,,2,,4,,2,,,2,,4,,,4,,2,,4,,,,,,,,,,,1,4,4,4,,,2,6,6,6,,,4,8,8,8,,2,6,6,6,6,,3,,3,,4,,3,,,4,,,2,,4,,3,3,4,,3,,,4,,,2,,3,,3,,4,,3,,,4,,,2,,,3,,3,,4,,3,,,4,,2,,,,,,,,,,,,,1,5,5,5,,2,6,6,6,,,4,8,8,8,8,8,,,2,6,6,6,6,,,3,,3,,4,,3,,,4,,2,,3,,3,4,,3,,,,4,,,2,,,3,,3,,4,,3,,,4,,2,,3,,3,,3,,4,,3,,,,4,,2],
//South
[4,,4,,1,,4,3,4,,1,,2,,4,4,4,,4,,,4,,4,3,1,,2,,1,,1,,3,,1,,4,,,,,,,,,,,,,,,,3,2,1,1,4,3,1,3,2,3,,3,,3,,2,,1,,4,,1,,1,1,3,4,1,,2,,4,,3,,3,,3,,4,1,2,,,,,,,,,,,,,,,3,,4,,1,,3,4,1,3,4,1,3,4,1,1,4,1,,3,,4,,1,,3,4,1,3,4,1,,,4,1,4,1,4,1,4,,,,,,,,,,,,,1,,4,3,,1,,4,2,3,4,1,3,4,1,4,3,1,,1,4,3,,4,,1,3,4,1,4,3,,2,,1,,4,3,4,1,,,,,,,,,,,,,4,,2,,4,,4,2,,3,1,,2,4,1,,3,,3,3,3,,3,,3,4,,2,,1,,4,,1,,1,,1,,1,4,,1,3,,,,,,,,,,,,,,3,4,3,1,2,4,,1,4,3,4,,1,4,3,1,4,,3,4,3,,3,1,,3,4,1,3,1,,1,1,4,3,4,3,1,3,4,3,1,2,4,1,4],
//}//week 2
//{
//Pico
[3,,4,,3,,,1,,,1,,3,,4,,3,,,1,,,3,,4,,3,,,1,,1,,3,,4,,3,,,,1,,,,,,,,,,,,,,3,,4,,1,,4,,1,,2,,,4,,1,,3,,4,,1,,2,,,,,4,,1,,4,,3,,1,,2,,,,3,,4,,1,,4,,1,,2,,,,,,,,,,,,,,,1,,4,,3,,3,,4,,2,,4,,3,,4,1,4,,3,,1,5,5,2,6,6,,3,,4,,1,,4,,4,,1,,3,,4,,,1,,1,,4,,4,,3,7,7,7,2,6,6,,,,,,,,,,,,,,,3,,4,,1,,4,,1,,4,2,,,,3,,1,,4,,4,,1,,4,2,,,,4,,1,,1,,3,,1,4,2,,,3,,4,,1,,4,,1,4,2,,,3,7,7,,4,,2,,,4,,,1,,3,,1,,4,,2,6,6,,,,3,7,7,,,,4,,2,,,4,,,1,,3,,,1,,4,,3,,3,,1,,1,,,3,,4,,1,,4,,1,,4,,2,,,,3,,1,,4,,4,,1,,4,2,,,,4,,1,,1,,3,,1,,4,2,,,,3,,4,,1,,4,,1,1,,2,,,,,,,,,,,,,,,4,,1,,1,,3,,4,,4,,2,,2,,4,1,4,,4,,2,6,6,6,,4,8,8,8,3,,4,,2,3,,4,1,,3,,4,,,1,,1,,4,,4,,3,7,7,7,,2,6,6,6],
//Philly
[3,,2,,3,7,7,,3,,1,,2,,4,,,3,,1,,,2,6,6,,4,,,1,,4,,3,,,,3,,,1,,,,,,,,,,,,,,,3,,1,,,1,,,4,,2,,,4,,,1,,,3,,1,,3,,3,,1,,3,,4,,2,,1,,2,,4,1,4,,4,,2,,,3,,3,,4,,,,,,,,,,,,,,,3,,3,,1,,,1,,,4,,2,,,4,,1,,,3,,1,,2,,2,,2,,1,,2,,4,,,2,,1,,2,,,4,1,4,,4,,2,,,3,,3,,4,,,,,,,,,,3,,4,,2,,1,,3,,4,,1,,4,,3,,4,,3,,1,,3,,4,,1,,2,,3,,4,,1,,2,,1,,2,,3,,4,,1,,4,,3,,4,,3,,1,,3,,4,,1,,1,,,,,,,,,,,,,,3,,4,,2,,1,,3,,4,,1,,4,,3,,4,,3,,1,,3,,4,,1,,1,,3,,4,,2,,1,,3,,4,,1,,4,,3,,4,,3,,1,,3,,4,,1,,1,,,,,,,,,,,,,,,,,,4,,4,,2,,2,,3,,3,,,1,,3,,4,1,4,,4,,4,,3,,1,,2,,4,,4,1,4,,2,,3,,3,,,,1,,3,,4,,1,,4,,3,,2,,4,,,,,,,,,,,,,3,,2,,4,,3,,,2,,4,,1,,4,,2,,,3,,3,,3,,4,,2,,1,,4,,3,,1,,1,,4,,4,,3,,1,,3,,4,1,,2,,,,,,,,,,,,,,,,,3,,4,,2,,1,,3,,4,,1,,4,,3,,4,,3,,1,,3,,4,,1,,1,,3,,4,,2,,1,,3,,4,,1,,4,,3,,4,,3,,1,,3,,4,,1,,1,,2],
//Blammed
[2,,4,,1,,1,,2,,4,8,,3,,1,,3,,4,,1,,4,,4,,2,,,,2,,4,,1,,1,,2,,4,,3,,4,,2,6,6,6,,7,,3,,1,,4,,2,,,,,,,,,,,,,,,,,,3,,4,,4,,3,,1,,4,,2,,4,,2,,1,,2,,3,,4,,1,,2,,3,,4,,4,,2,,1,,4,,3,,4,,1,,2,,2,,2,,4,,3,,1,,2,,,,,,,,,,,,,,,,,,,,,1,,3,7,7,7,,4,,4,,2,6,6,,,3,7,7,7,,,4,,3,,1,,4,,,,1,,3,7,7,,,4,,4,,3,2,6,6,6,1,5,5,5,,,3,,4,,4,,3,,4,,4,,,,,,,,,,,,,,,,,,,1,,1,,4,,2,4,2,,1,,2,,1,,3,,3,,4,,3,,2,,1,2,1,,1,,4,,4,,4,,3,1,3,4,1,,1,,1,,1,,1,,1,,,4,,4,,3,,1,,,3,,4,,,,,,,,,,,,,,,,,,,1,,1,,4,,2,4,2,,1,,2,,1,,3,,3,,4,,3,,2,,1,2,1,,1,,4,,4,,4,,4,,3,1,3,4,1,,1,,1,,1,,3,,4,,3,,1,,2,,1,,3,,4,,2,6,6,6,,,,,,,,,,,,,,,,1,,3,7,7,7,,,4,,4,,2,6,6,6,6,,,3,7,7,7,,4,,,3,,,,1,,4,,1,,3,7,7,,,4,,4,,2,6,6,,1,4,5,5,,2,,4,,4,,2,,3,,4,,4,,,,,,,,,,,,,,,,,,,,1,1,3,7,7,,,4,,4,,2,6,6,6,,3,7,7,,,4,,3,,,1,,4,,,1,,3,7,7,,4,,4,,3,7,7,,1,5,5,5,,2,,4,4,2,3,4],
//}//week 3
//
//Satin Panties
[4,,4,,4,,4,,4,4,,4,,4,,4,,4,4,,,,,,,,,,,,3,,4,,3,4,,1,,3,4,,1,4,,,3,,4,,3,4,,1,,3,4,1,2,,3,6,6,6,6,6,6,,,,,,,,,,,,2,,1,,4,,3,7,7,,,4,,1,,2,,4,8,8,,1,,,,1,1,1,1,3,7,7,7,,4,,1,,2,,,3,7,7,7,7,,4,3,4,3,1,2,1,2,1,,4,1,4,2,6,6,6,6,,1,4,1,4,3,,4,,4,,1,,2,,4,8,8,8,,1,5,5,5,,3,,3,3,1,5,5,5,,2,6,6,6,6,,,4,8,8,8,,,3,7,7,7,7,,,1,,4,,2,6,6,6,6,,,,,,,,,,,,,,3,4,1,,2,,4,1,4,,4,1,2,,,,2,4,1,,2,,3,4,1,1,4,1,,1,,3,3,7,7,7,,,,,,,,,,,,,,,4,1,2,,3,4,1,2,,2,,4,,1,,4,,3,,4,,1,,2,,1,,2,,3,4,,1,,2,,3,4,1,,1,,4,,1,,1,,2,,,,,,,,,,,,,,,,3,4,1,4,1,3,4,,4,,2,,1,,4,,2,1,4,3,,1,,3,,1,,2,,3,7,7,7,7,7,,4,3,4,3,1,2,1,2,1,,34,,1,,4,,2,6,6,6,,1,4,1,4,3,,4,,4,,2,,1,5,5,5,5,,4,8,8,8,8,,3,,3,,3,,4,8,8,8,,2,6,6,6,6,,4,8,8,8,,,3,7,7,7,7,,1,,4,,2,6,6,6,6,6,,,,,,,,,,,,,,,,,,3,4,1,,2,,4,1,4,,4,1,2,,,,,2,4,1,,2,,3,4,1,,1,,3,4,1,2,6,6,6,6,,4,8,8,8,,3,7,7,7,7,,4,8,8,8,8,,2,6,6,6,,4,8,8,8,8,,3,7,7,7,7,,4,1,1,2,1,,3,4,1,2,2,,,4,1,4,2,4,1,2,,1,,2,,4,1,,3,4,1,1,4,1,1,2,4,8,8,8,8,8,8,,,,,,,,,,,3,,4,,3,4,,1,3,4,1,2,,3,7,7,7,7,7],
//High

[],
[],
[],
[],
[],
[],
[],
[],
[3,,,2,,,3,,,1,4,,3,,4,,1,,,3,,,1,,4,,,,,,,,,,2,,,1,,4,,2,,,,,2,,,1,,1,,4,,4,,4,,4,,,,,,,,,,,3,,,4,,,2,,4,,1,,,,,3,,,2,,,1,,,3,,,1,,,4,,3,,,,,,,,,,,,,,,,,,,,,,1,,,3,,,3,,,1,,2,,1,,4,,3,,,1,,,3,,4,,,3,,,1,,,1,,,2,,,4,,,2,,,3,,,4,,,1,,,,,2,,4,,,1,,,2,,,1,,,1,,3,,4,,,,,1,,4,,,3,,4,,,4,,1,,,3,,,4,,,4,,,,,,,3,,,1,,,3,,,1,4,,3,,4,1,,,4], [1,,1,,1,,2,,4,,2,,4,,2,,1,,1,,1,,1,,2,,2,,3,,4,,3,,2,,,1,4,1,4,1,4,1,,,,,,,,,,,1,,4,2,2,,3,,1,4,4,2,1,3,,4,,1,1,,4,,1,,4,,1,,3,,1,,1,,2,,4,4,,,,,,,,,,,,1,,,2,,2,,4,,,2,2,,1,,2,,1,, ,3,,,4,,4,,1,,1,,2,,2,,,,,,,,,4,,,3,3,,1,,4,,2,,1,,4,,3,2,3,1,,3,,4,4,,3,,3,,1,,,,,,,,3,,,2,,2,,,4,,3,,2,,1,1,,4,,3,3,2,1,,4,,1,,4,,3,2,,,,,,,,,,,,4,4,,2,,3,3,1,2,2,4,1,3,,2,,2,,3,,4,,1,1,2,2,,3,,2,,,,,,,,,,,,2,2,2,2,3,,4,,3,3,3,,3,1,,2,4,4,3,,3,,2,,,2,,4,4,4,,,,,,,,,,,3,,,2,2,4,,1,,,2,4,,4,4,,3,,3,,2,4,2,4,2,4,3,1,1,,,,,,,,,,,,,2,2,,3,,4,4,,1,,1,,3,2,2,,,3,,2,4,,3,2,,,1,1,3,,3,,,,,,,,,,2,2,,3,,4,,2,2,2,,3,,1,,4,,3,,,3,,1,,1,,4,,3,,,,,,,3,,3,,2,2,,4,1,4,,2,,4,,,,,,,3,3,4,1,1,2,4,4,2,2,4,4,,,,,,,,,2,2,3,1,,2,,4,4,,1,3,,,2,,,,,,,,3,,1,,3,,1,,2,4,2,4,2,4,,,,,2,2,3,3,4,4,,,,,,2,2,1,1,3,3,,,,,2,2,3,3,4,4,,,,,2,2,1,1,4,4,2,2,,,,,2,2,3,3,4,4,2,2,,,,,,2,2,3,3,1,1,4,4,,,,,,4,4,2,2,3,3,1,1,,,,,,2,2,3,3,4,4,1,1,,,,,,,1,1,4,4,3,3,2,2,3,3,4,4,3,3,2,2,,,,,,,2,2,3,3,4,4,,1,2,2,4,4,2,2,4,4,1,1,,,,,2,2,3,3,4,4,2,2,3,3,4,4,1,1,3,3,4,4,,,,,,4,4,3,3,2,2,1,1,4,4,1,1,3,3,3,,2,,,,,4,1,,1,2,2,,,4,1,4,4,1,4,,,1,4,,2,2,1,,4,,2,2,,,,,,,,,,2,,2,2,3,3,4,1,2,2,4,,4,1,,2,,3,3,,4,,2,2,,1,4,1,,,,,,,,,,4,,4,2,2,,,1,1,,3,3,,2,,,,,,2,2,,1,3,,,,2,2,1,3,1,,1,,,,,,,,,2,2,1,3,,3,1,3,1,,1,,4,3,1,2,4,,2,1,2,4,2,1,,,,,,,,,2,4,3,1,3,2,,2,,4,3,1,1,3,4,,3,1,3,,,,,,,,,,3,2,1,3,4,2,,1,,3,,4,,3,3,3,4,3,2,3,2,2,3,3,4,4,3,3,2,2,1,1,2,2,2,3,3,4,4,3,3,2,2,1,1,4,4,3,3,2,2,1,1,4,4,3,3,2,2,3,3,2,2,1,1,2,2,1,1,3,3,4,4,3,3,1,1,2,2,1,1,4,4,3,3,4,4,3,3,2,2,1,1,2,2,3,3,4,4,3,3,2,2,1,1,2,2,3,3,4,4,3,3,2,2,1,1,2,2,1,1,2,2,1,1,3,3,4,4,3,3,4,4,3,3,2,2,3,3,2,2,1,1,4,4,2,2,4,2,,3,3,3,2,3,4,3,3,2,4,3,3,2,3,,,3,,4,4,2,,,,,,,,,,2,,4,,1,,3,,2,,2,,3,1,2,3,4,3,2,4,2,4,2,4,3]
//Put your song here
];
}//all the songs
var songnames = ['Tutorial', 'Bopeebo', 'Fresh', 'Dad Battle', 'Spookeez', 'South', 'Pico', 'Philly', 'Blammed', 'Satin Panties', 'High', 'Milf', 'Cocoa', 'Eggnog', 'Winter Horrorland', 'Senpai', 'Roses', 'Thorns', 'Lo Fight', 'Overhead', 'Ballistic'];
var scores = [];
{
var leftarrow = function(y, c, c2) {
    fill(c, c2, c);
    rect(80, y, 60, 15, 5);
    quad(80, y, 112, y-25, 116, y-8, 105, y);
    quad(80, y, 80, y+15, 110, y+38, 115, y+23);
};
var downarrow = function(y, c, c2) {
    fill(c2, c2, c);
    rect(215, y-10, 15, 60);
    quad(215, y+50, 192, y+20, 205, y+10, 215, y+24);
    quad(230, y+50, 250, y+20, 240, y+10, 230, y+24);
};
var uparrow = function(y, c, c2) {
    fill(c2, c, c2);
    rect(320, y-10, 15, 60);
    quad(320, y-10, 320, y+15, 312, y+28, 300, y+20);
    quad(335, y-10, 335, y+15, 342, y+27, 355, y+20);
};
var rightarrow = function(y, c, c2) {
    fill(c, c2, c2);
    rect(420, y, 60, 15);
    quad(480, y, 455, y-25, 440, y-10, 452, y);
    quad(480, y+15, 448, y+40, 440, y+24, 452, y+15);
};
var held = function(x, y, c) {
    switch(c) { 
        case 1: fill(255, 0, 255); break;
        case 2: fill(0, 0, 255); break;
        case 3: fill(0, 255, 0); break;
        case 4: fill(255, 0, 0); break;
    }
    rect(x, y, 15, 60);
};
}//arrows
function check(v, ky, s) {
    if((keyCode === ky || key.toString() === s) && v.exists && v.type < 5) {
        health += healthgain;
        score += abs(80-v.y);
        correct += 1;
        con -= 1;
        v.exists = false;
        switch(v.type) {
            case 1: playSound(getSound("rpg/giant-no")); break;
            case 2: playSound(getSound("rpg/giant-yah"));break;
            case 3: playSound(getSound("rpg/giant-hyah")); break;
            case 4: playSound(getSound("rpg/metal-chime"));
        }
        if(abs(70-v.y) < 10) {
            scores.push(1);
        } else if(abs(70-v.y) < 20) {
            scores.push(2);
        } else {
            scores.push(3);
        }
    } else {
        health -= healthpen;
    }
}
function checkheld(v, ky, s) {
    if((keyCode === ky || key.toString() === s) && v.exists) {
        health += healthgain;
        score += abs(60-v.y);
        correct += 1;
        v.exists = false;
    }}
function lh(v) {
    keyPressed = function() {
        if(v.y > 30 && v.type < 5) {
            con += 1;
            if(con > 0) {
                switch(v.type) {
                    case 1: check(v, keyLeft2, keyLeft); break;
                    case 2: check(v, keyDown2,  keyDown);break;
                    case 3: check(v, keyUp2, keyUp); break;
                    case 4: check(v, keyRight2,keyRight);break;
                }
            }
        }
    };
    if(keyIsPressed && v.type > 4 && v.y > 30) {
        switch(v.type) {
            case 5:checkheld(v,keyLeft2,keyLeft);break;
            case 6:checkheld(v,keyDown2,keyDown);break;
            case 7: checkheld(v, keyUp2, keyUp); break;
            case 8: checkheld(v, keyRight2, keyRight);
        }
    }
    if(keyIsPressed && v.y > 30 && v.y < 80) {
        con += 1;
        if(con > 0) {
            switch(v.type) {
                case 5: checkheld(v, keyLeft2, keyLeft); break;
                case 6: checkheld(v, keyDown2, keyDown); break;
                case 7: checkheld(v, keyUp2, keyUp); break;
                case 8: checkheld(v, keyRight2, keyRight);
            }
        }
    }
    if(v.y < 0 && v.exists) {
        health -= healthpen;
        v.exists = false;
    }
    //con = 0;
}
function whichsong(sg) {
    if(song === sg) {
        textSize(50);
    } else {
        textSize(30);
    }
}
draw = function() {
    if(!menuclosed) {
        {
        if(song < 0) {songx = songnames.length*100-100; song = songnames.length-1;}
        if(song > songnames.length-1) {songx = 0; song = 0;}
        diff = constrain(diff, 1, 4);
        fill(0);
        textSize(30);
        }//constraining
        {switch(diff) {
            case 1: 
                spread = 14;
                speed = 2;
                background(255, 255, 0);
                text('Easy', 450, 50);break;
            case 2: 
                spread = 8;
                speed = 4; 
                background(255, 0, 255); 
                text('Normal', 450, 50); break;
            case 3: 
                spread = 5; 
                speed = 7; 
                background(255, 50, 50);
                text('Hard', 450, 50); break;
            case 4: 
                spread = 3;
                speed = 10;
                background(220, 0, 0);
                text('Very Hard', 450, 50); break;
        }}//difficulty
        {
        fill(0);
        for(var m = 0; m < songnames.length; m++) {
            whichsong(m);
            text(songnames[m], 100, 300+m*100-songx);
        }
        if(movup) {
            songx -= 10;
            if(songx < song*100-100) {
                song -= 1;
                movup = false; 
            }
        }
        if(movdown) {
            songx += 10;
            if(songx > song*100+100) {
                song += 1;
                movdown = false;
            }
        }
        }//menu movement
        {
        keyPressed=function(){if(!menuclosed){switch(keyCode){
            case UP: movup = true; break;
            case DOWN: movdown = true; break;
            case RIGHT: diff += 1; break;
            case LEFT: diff -= 1; break;
            case 32: 
                for(var p = 0; p < songnames.length; p++) {
                    if(song === p) {
                        songplayed = songs[p];
                    }
                }
                for(var i = 0; i < songplayed.length; i++) {
                    notes.push({
                        time: i, 
                        type: songplayed[i],
                        y: 650,
                        exists: true
                    });
                }
                for(var p = 0; p < songplayed.length; p++) {
                    if(notes[p].type !== undefined) {
                        numnotes += 1;
                    }
                }
                menuclosed = true;
            }}
        };
        }//loading in notes
    }//song menu
    if(menuclosed) {
    background(255, 255, 255);
    fill(255, 0, 0);
    {
    leftarrow(70, 100, 100);
    uparrow(55, 100, 100);
    downarrow(55, 100, 100);
    rightarrow(70, 100, 100);
    }//arrow drawings
    {
    fill(0);
    textSize(30);
    for(var u = 0; u < scores.length; u++) {
        switch(scores[u]) {
            case 1: text('Sick!', 520, (scores.length-u)*30+100); break;
            case 2: text('Good', 520, (scores.length-u)*30+100); break;
            case 3: text('Bad', 520, (scores.length-u)*30+100);
        }
    }
    }//score (sick, good, bad)
    {
    fill(255, 255, 255);
    rect(500, 520, 100, 100);
    fill(0);
    rect(20, 550, 560, 20);
    fill(12, 242, 231);
    health = constrain(health, 0, 100);
    ellipse(580-health*5.4, 560, 40, 40);
    textSize(20);
    fill(0);
    text("Score:"+ score, 480, 590);
    if(health === 0) {
        background(0);
    }
    }//health
    {
    for(var j = 0; j < notes.length; j++) {if(notes[j].exists) {
        fill(0);
        switch(notes[j].type) {
            case 1: leftarrow(notes[j].y, 255, 0); break;
            case 2: downarrow(notes[j].y, 255, 0); break;
            case 3: uparrow(notes[j].y, 255, 0); break;
            case 4: rightarrow(notes[j].y, 255, 0); break;
            case 5: held(95, notes[j].y-5, 1); break;
            case 6: held(215, notes[j].y, 2); break;
            case 7: held(320, notes[j].y, 3); break;
            case 8: held(445, notes[j].y-5, 4); break;
        }
        if(note >= notes[j].time) {
            notes[j].y -= speed;
        }}
    }
    timer += 1;
    if(timer > spread) {
        note += 1;
        timer = 0;
    }
    }//generating notes
    {
    for(var h = 0; h < notes.length; h++) {
        if(diff < 4 && notes[h].y < 105 && notes[h].type !== undefined) {
            lh(notes[h]);
        }
        if(diff === 4 && notes[h].y < 120 && notes[h].type !== undefined) {
            lh(notes[h]);
        }
    }
    }//pressing notes
    {
    switch(diff) {
        case 1: spread = 14; speed = 2; break;
        case 2: spread = 8; speed = 4; break;
        case 3: spread = 5; speed = 7; break;
    }
    }//difficulty
    {
    fill(0);
    text(correct + '/' + numnotes + ' notes sang correctly', 350, 40);
    if(health === 0) {
        dead = true;
    }
    if(dead) {
        background(0, 0, 0);
        fill(255, 255, 255);
        textSize(40);
        text('      Q to quit\nENTER to restart', 170, 280);
        deadtime += 1;
        keyPressed = function() {
            if(key.toString() === 'q') {
                health = 50;
                note = 0;
                timer = 0;
                dead = false;
                menuclosed = false;
                for(var s = 0; s < notes.length; s++) {
                    notes[s].y = 650;
                    notes[s].exists = true;
                    delete scores[s];
                }
            }
            if(keyCode === ENTER) {
                for(var p = 0; p < notes.length; p++) {
                    notes[p].y = 650;
                    notes[p].exists = true;
                    health = 50;
                    timer = 0;
                    note = 0;
                    dead = false;
                    delete scores[p];
                }
            }
        };
    }
    }//other stats
    }
};
